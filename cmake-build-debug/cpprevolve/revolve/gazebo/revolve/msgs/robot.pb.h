// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#ifndef PROTOBUF_INCLUDED_robot_2eproto
#define PROTOBUF_INCLUDED_robot_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "body.pb.h"
#include "neural_net.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_robot_2eproto 

namespace protobuf_robot_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_robot_2eproto
namespace revolve {
namespace msgs {
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
}  // namespace msgs
}  // namespace revolve
namespace google {
namespace protobuf {
template<> ::revolve::msgs::Robot* Arena::CreateMaybeMessage<::revolve::msgs::Robot>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace revolve {
namespace msgs {

// ===================================================================

class Robot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.Robot) */ {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Robot* other);
  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(NULL);
  }

  Robot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .revolve.msgs.Body body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::revolve::msgs::Body& _internal_body() const;
  public:
  const ::revolve::msgs::Body& body() const;
  ::revolve::msgs::Body* release_body();
  ::revolve::msgs::Body* mutable_body();
  void set_allocated_body(::revolve::msgs::Body* body);

  // required .revolve.msgs.NeuralNetwork brain = 3;
  bool has_brain() const;
  void clear_brain();
  static const int kBrainFieldNumber = 3;
  private:
  const ::revolve::msgs::NeuralNetwork& _internal_brain() const;
  public:
  const ::revolve::msgs::NeuralNetwork& brain() const;
  ::revolve::msgs::NeuralNetwork* release_brain();
  ::revolve::msgs::NeuralNetwork* mutable_brain();
  void set_allocated_brain(::revolve::msgs::NeuralNetwork* brain);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:revolve.msgs.Robot)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_body();
  void clear_has_body();
  void set_has_brain();
  void clear_has_brain();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::revolve::msgs::Body* body_;
  ::revolve::msgs::NeuralNetwork* brain_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_robot_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Robot

// required int32 id = 1;
inline bool Robot::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Robot::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Robot::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Robot::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Robot::id() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Robot.id)
  return id_;
}
inline void Robot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:revolve.msgs.Robot.id)
}

// required .revolve.msgs.Body body = 2;
inline bool Robot::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robot::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::revolve::msgs::Body& Robot::_internal_body() const {
  return *body_;
}
inline const ::revolve::msgs::Body& Robot::body() const {
  const ::revolve::msgs::Body* p = body_;
  // @@protoc_insertion_point(field_get:revolve.msgs.Robot.body)
  return p != NULL ? *p : *reinterpret_cast<const ::revolve::msgs::Body*>(
      &::revolve::msgs::_Body_default_instance_);
}
inline ::revolve::msgs::Body* Robot::release_body() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Robot.body)
  clear_has_body();
  ::revolve::msgs::Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::revolve::msgs::Body* Robot::mutable_body() {
  set_has_body();
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::revolve::msgs::Body>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Robot.body)
  return body_;
}
inline void Robot::set_allocated_body(::revolve::msgs::Body* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_);
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    set_has_body();
  } else {
    clear_has_body();
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Robot.body)
}

// required .revolve.msgs.NeuralNetwork brain = 3;
inline bool Robot::has_brain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot::set_has_brain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robot::clear_has_brain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::revolve::msgs::NeuralNetwork& Robot::_internal_brain() const {
  return *brain_;
}
inline const ::revolve::msgs::NeuralNetwork& Robot::brain() const {
  const ::revolve::msgs::NeuralNetwork* p = brain_;
  // @@protoc_insertion_point(field_get:revolve.msgs.Robot.brain)
  return p != NULL ? *p : *reinterpret_cast<const ::revolve::msgs::NeuralNetwork*>(
      &::revolve::msgs::_NeuralNetwork_default_instance_);
}
inline ::revolve::msgs::NeuralNetwork* Robot::release_brain() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Robot.brain)
  clear_has_brain();
  ::revolve::msgs::NeuralNetwork* temp = brain_;
  brain_ = NULL;
  return temp;
}
inline ::revolve::msgs::NeuralNetwork* Robot::mutable_brain() {
  set_has_brain();
  if (brain_ == NULL) {
    auto* p = CreateMaybeMessage<::revolve::msgs::NeuralNetwork>(GetArenaNoVirtual());
    brain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Robot.brain)
  return brain_;
}
inline void Robot::set_allocated_brain(::revolve::msgs::NeuralNetwork* brain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(brain_);
  }
  if (brain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brain, submessage_arena);
    }
    set_has_brain();
  } else {
    clear_has_brain();
  }
  brain_ = brain;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Robot.brain)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_robot_2eproto
