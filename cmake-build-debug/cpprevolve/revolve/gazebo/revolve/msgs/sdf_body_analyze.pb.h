// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdf_body_analyze.proto

#ifndef PROTOBUF_INCLUDED_sdf_5fbody_5fanalyze_2eproto
#define PROTOBUF_INCLUDED_sdf_5fbody_5fanalyze_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sdf_5fbody_5fanalyze_2eproto 

namespace protobuf_sdf_5fbody_5fanalyze_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sdf_5fbody_5fanalyze_2eproto
namespace revolve {
namespace msgs {
class BodyAnalysisResponse;
class BodyAnalysisResponseDefaultTypeInternal;
extern BodyAnalysisResponseDefaultTypeInternal _BodyAnalysisResponse_default_instance_;
class BoundingBox;
class BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class Contact;
class ContactDefaultTypeInternal;
extern ContactDefaultTypeInternal _Contact_default_instance_;
}  // namespace msgs
}  // namespace revolve
namespace google {
namespace protobuf {
template<> ::revolve::msgs::BodyAnalysisResponse* Arena::CreateMaybeMessage<::revolve::msgs::BodyAnalysisResponse>(Arena*);
template<> ::revolve::msgs::BoundingBox* Arena::CreateMaybeMessage<::revolve::msgs::BoundingBox>(Arena*);
template<> ::revolve::msgs::Contact* Arena::CreateMaybeMessage<::revolve::msgs::Contact>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace revolve {
namespace msgs {

// ===================================================================

class Contact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.Contact) */ {
 public:
  Contact();
  virtual ~Contact();

  Contact(const Contact& from);

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Contact(Contact&& from) noexcept
    : Contact() {
    *this = ::std::move(from);
  }

  inline Contact& operator=(Contact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contact* internal_default_instance() {
    return reinterpret_cast<const Contact*>(
               &_Contact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Contact* other);
  friend void swap(Contact& a, Contact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Contact* New() const final {
    return CreateMaybeMessage<Contact>(NULL);
  }

  Contact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Contact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string collision1 = 1;
  bool has_collision1() const;
  void clear_collision1();
  static const int kCollision1FieldNumber = 1;
  const ::std::string& collision1() const;
  void set_collision1(const ::std::string& value);
  #if LANG_CXX11
  void set_collision1(::std::string&& value);
  #endif
  void set_collision1(const char* value);
  void set_collision1(const char* value, size_t size);
  ::std::string* mutable_collision1();
  ::std::string* release_collision1();
  void set_allocated_collision1(::std::string* collision1);

  // required string collision2 = 2;
  bool has_collision2() const;
  void clear_collision2();
  static const int kCollision2FieldNumber = 2;
  const ::std::string& collision2() const;
  void set_collision2(const ::std::string& value);
  #if LANG_CXX11
  void set_collision2(::std::string&& value);
  #endif
  void set_collision2(const char* value);
  void set_collision2(const char* value, size_t size);
  ::std::string* mutable_collision2();
  ::std::string* release_collision2();
  void set_allocated_collision2(::std::string* collision2);

  // @@protoc_insertion_point(class_scope:revolve.msgs.Contact)
 private:
  void set_has_collision1();
  void clear_has_collision1();
  void set_has_collision2();
  void clear_has_collision2();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr collision1_;
  ::google::protobuf::internal::ArenaStringPtr collision2_;
  friend struct ::protobuf_sdf_5fbody_5fanalyze_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BoundingBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.BoundingBox) */ {
 public:
  BoundingBox();
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BoundingBox* other);
  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const final {
    return CreateMaybeMessage<BoundingBox>(NULL);
  }

  BoundingBox* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Vector3d min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  private:
  const ::gazebo::msgs::Vector3d& _internal_min() const;
  public:
  const ::gazebo::msgs::Vector3d& min() const;
  ::gazebo::msgs::Vector3d* release_min();
  ::gazebo::msgs::Vector3d* mutable_min();
  void set_allocated_min(::gazebo::msgs::Vector3d* min);

  // required .gazebo.msgs.Vector3d max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  private:
  const ::gazebo::msgs::Vector3d& _internal_max() const;
  public:
  const ::gazebo::msgs::Vector3d& max() const;
  ::gazebo::msgs::Vector3d* release_max();
  ::gazebo::msgs::Vector3d* mutable_max();
  void set_allocated_max(::gazebo::msgs::Vector3d* max);

  // @@protoc_insertion_point(class_scope:revolve.msgs.BoundingBox)
 private:
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Vector3d* min_;
  ::gazebo::msgs::Vector3d* max_;
  friend struct ::protobuf_sdf_5fbody_5fanalyze_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BodyAnalysisResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.BodyAnalysisResponse) */ {
 public:
  BodyAnalysisResponse();
  virtual ~BodyAnalysisResponse();

  BodyAnalysisResponse(const BodyAnalysisResponse& from);

  inline BodyAnalysisResponse& operator=(const BodyAnalysisResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BodyAnalysisResponse(BodyAnalysisResponse&& from) noexcept
    : BodyAnalysisResponse() {
    *this = ::std::move(from);
  }

  inline BodyAnalysisResponse& operator=(BodyAnalysisResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyAnalysisResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BodyAnalysisResponse* internal_default_instance() {
    return reinterpret_cast<const BodyAnalysisResponse*>(
               &_BodyAnalysisResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BodyAnalysisResponse* other);
  friend void swap(BodyAnalysisResponse& a, BodyAnalysisResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BodyAnalysisResponse* New() const final {
    return CreateMaybeMessage<BodyAnalysisResponse>(NULL);
  }

  BodyAnalysisResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BodyAnalysisResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BodyAnalysisResponse& from);
  void MergeFrom(const BodyAnalysisResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyAnalysisResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .revolve.msgs.Contact contact = 2;
  int contact_size() const;
  void clear_contact();
  static const int kContactFieldNumber = 2;
  ::revolve::msgs::Contact* mutable_contact(int index);
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Contact >*
      mutable_contact();
  const ::revolve::msgs::Contact& contact(int index) const;
  ::revolve::msgs::Contact* add_contact();
  const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Contact >&
      contact() const;

  // optional .revolve.msgs.BoundingBox boundingBox = 1;
  bool has_boundingbox() const;
  void clear_boundingbox();
  static const int kBoundingBoxFieldNumber = 1;
  private:
  const ::revolve::msgs::BoundingBox& _internal_boundingbox() const;
  public:
  const ::revolve::msgs::BoundingBox& boundingbox() const;
  ::revolve::msgs::BoundingBox* release_boundingbox();
  ::revolve::msgs::BoundingBox* mutable_boundingbox();
  void set_allocated_boundingbox(::revolve::msgs::BoundingBox* boundingbox);

  // @@protoc_insertion_point(class_scope:revolve.msgs.BodyAnalysisResponse)
 private:
  void set_has_boundingbox();
  void clear_has_boundingbox();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Contact > contact_;
  ::revolve::msgs::BoundingBox* boundingbox_;
  friend struct ::protobuf_sdf_5fbody_5fanalyze_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Contact

// required string collision1 = 1;
inline bool Contact::has_collision1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contact::set_has_collision1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contact::clear_has_collision1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contact::clear_collision1() {
  collision1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collision1();
}
inline const ::std::string& Contact::collision1() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Contact.collision1)
  return collision1_.GetNoArena();
}
inline void Contact::set_collision1(const ::std::string& value) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revolve.msgs.Contact.collision1)
}
#if LANG_CXX11
inline void Contact::set_collision1(::std::string&& value) {
  set_has_collision1();
  collision1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.Contact.collision1)
}
#endif
inline void Contact::set_collision1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revolve.msgs.Contact.collision1)
}
inline void Contact::set_collision1(const char* value, size_t size) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.Contact.collision1)
}
inline ::std::string* Contact::mutable_collision1() {
  set_has_collision1();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Contact.collision1)
  return collision1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_collision1() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Contact.collision1)
  if (!has_collision1()) {
    return NULL;
  }
  clear_has_collision1();
  return collision1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_collision1(::std::string* collision1) {
  if (collision1 != NULL) {
    set_has_collision1();
  } else {
    clear_has_collision1();
  }
  collision1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collision1);
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Contact.collision1)
}

// required string collision2 = 2;
inline bool Contact::has_collision2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Contact::set_has_collision2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Contact::clear_has_collision2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Contact::clear_collision2() {
  collision2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collision2();
}
inline const ::std::string& Contact::collision2() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Contact.collision2)
  return collision2_.GetNoArena();
}
inline void Contact::set_collision2(const ::std::string& value) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revolve.msgs.Contact.collision2)
}
#if LANG_CXX11
inline void Contact::set_collision2(::std::string&& value) {
  set_has_collision2();
  collision2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.Contact.collision2)
}
#endif
inline void Contact::set_collision2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revolve.msgs.Contact.collision2)
}
inline void Contact::set_collision2(const char* value, size_t size) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.Contact.collision2)
}
inline ::std::string* Contact::mutable_collision2() {
  set_has_collision2();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Contact.collision2)
  return collision2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_collision2() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Contact.collision2)
  if (!has_collision2()) {
    return NULL;
  }
  clear_has_collision2();
  return collision2_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_collision2(::std::string* collision2) {
  if (collision2 != NULL) {
    set_has_collision2();
  } else {
    clear_has_collision2();
  }
  collision2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collision2);
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Contact.collision2)
}

// -------------------------------------------------------------------

// BoundingBox

// required .gazebo.msgs.Vector3d min = 1;
inline bool BoundingBox::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoundingBox::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoundingBox::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Vector3d& BoundingBox::_internal_min() const {
  return *min_;
}
inline const ::gazebo::msgs::Vector3d& BoundingBox::min() const {
  const ::gazebo::msgs::Vector3d* p = min_;
  // @@protoc_insertion_point(field_get:revolve.msgs.BoundingBox.min)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* BoundingBox::release_min() {
  // @@protoc_insertion_point(field_release:revolve.msgs.BoundingBox.min)
  clear_has_min();
  ::gazebo::msgs::Vector3d* temp = min_;
  min_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* BoundingBox::mutable_min() {
  set_has_min();
  if (min_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    min_ = p;
  }
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BoundingBox.min)
  return min_;
}
inline void BoundingBox::set_allocated_min(::gazebo::msgs::Vector3d* min) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(min_);
  }
  if (min) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    set_has_min();
  } else {
    clear_has_min();
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.BoundingBox.min)
}

// required .gazebo.msgs.Vector3d max = 2;
inline bool BoundingBox::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoundingBox::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoundingBox::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Vector3d& BoundingBox::_internal_max() const {
  return *max_;
}
inline const ::gazebo::msgs::Vector3d& BoundingBox::max() const {
  const ::gazebo::msgs::Vector3d* p = max_;
  // @@protoc_insertion_point(field_get:revolve.msgs.BoundingBox.max)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* BoundingBox::release_max() {
  // @@protoc_insertion_point(field_release:revolve.msgs.BoundingBox.max)
  clear_has_max();
  ::gazebo::msgs::Vector3d* temp = max_;
  max_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* BoundingBox::mutable_max() {
  set_has_max();
  if (max_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    max_ = p;
  }
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BoundingBox.max)
  return max_;
}
inline void BoundingBox::set_allocated_max(::gazebo::msgs::Vector3d* max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_);
  }
  if (max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    set_has_max();
  } else {
    clear_has_max();
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.BoundingBox.max)
}

// -------------------------------------------------------------------

// BodyAnalysisResponse

// optional .revolve.msgs.BoundingBox boundingBox = 1;
inline bool BodyAnalysisResponse::has_boundingbox() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyAnalysisResponse::set_has_boundingbox() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyAnalysisResponse::clear_has_boundingbox() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyAnalysisResponse::clear_boundingbox() {
  if (boundingbox_ != NULL) boundingbox_->Clear();
  clear_has_boundingbox();
}
inline const ::revolve::msgs::BoundingBox& BodyAnalysisResponse::_internal_boundingbox() const {
  return *boundingbox_;
}
inline const ::revolve::msgs::BoundingBox& BodyAnalysisResponse::boundingbox() const {
  const ::revolve::msgs::BoundingBox* p = boundingbox_;
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyAnalysisResponse.boundingBox)
  return p != NULL ? *p : *reinterpret_cast<const ::revolve::msgs::BoundingBox*>(
      &::revolve::msgs::_BoundingBox_default_instance_);
}
inline ::revolve::msgs::BoundingBox* BodyAnalysisResponse::release_boundingbox() {
  // @@protoc_insertion_point(field_release:revolve.msgs.BodyAnalysisResponse.boundingBox)
  clear_has_boundingbox();
  ::revolve::msgs::BoundingBox* temp = boundingbox_;
  boundingbox_ = NULL;
  return temp;
}
inline ::revolve::msgs::BoundingBox* BodyAnalysisResponse::mutable_boundingbox() {
  set_has_boundingbox();
  if (boundingbox_ == NULL) {
    auto* p = CreateMaybeMessage<::revolve::msgs::BoundingBox>(GetArenaNoVirtual());
    boundingbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BodyAnalysisResponse.boundingBox)
  return boundingbox_;
}
inline void BodyAnalysisResponse::set_allocated_boundingbox(::revolve::msgs::BoundingBox* boundingbox) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete boundingbox_;
  }
  if (boundingbox) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      boundingbox = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    set_has_boundingbox();
  } else {
    clear_has_boundingbox();
  }
  boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.BodyAnalysisResponse.boundingBox)
}

// repeated .revolve.msgs.Contact contact = 2;
inline int BodyAnalysisResponse::contact_size() const {
  return contact_.size();
}
inline void BodyAnalysisResponse::clear_contact() {
  contact_.Clear();
}
inline ::revolve::msgs::Contact* BodyAnalysisResponse::mutable_contact(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BodyAnalysisResponse.contact)
  return contact_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Contact >*
BodyAnalysisResponse::mutable_contact() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.BodyAnalysisResponse.contact)
  return &contact_;
}
inline const ::revolve::msgs::Contact& BodyAnalysisResponse::contact(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyAnalysisResponse.contact)
  return contact_.Get(index);
}
inline ::revolve::msgs::Contact* BodyAnalysisResponse::add_contact() {
  // @@protoc_insertion_point(field_add:revolve.msgs.BodyAnalysisResponse.contact)
  return contact_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Contact >&
BodyAnalysisResponse::contact() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.BodyAnalysisResponse.contact)
  return contact_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sdf_5fbody_5fanalyze_2eproto
