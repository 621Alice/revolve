// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_states.proto

#ifndef PROTOBUF_robot_5fstates_2eproto__INCLUDED
#define PROTOBUF_robot_5fstates_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include "pose.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_robot_5fstates_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRobotStateImpl();
void InitDefaultsRobotState();
void InitDefaultsRobotStatesImpl();
void InitDefaultsRobotStates();
inline void InitDefaults() {
  InitDefaultsRobotState();
  InitDefaultsRobotStates();
}
}  // namespace protobuf_robot_5fstates_2eproto
namespace revolve {
namespace msgs {
class RobotState;
class RobotStateDefaultTypeInternal;
extern RobotStateDefaultTypeInternal _RobotState_default_instance_;
class RobotStates;
class RobotStatesDefaultTypeInternal;
extern RobotStatesDefaultTypeInternal _RobotStates_default_instance_;
}  // namespace msgs
}  // namespace revolve
namespace revolve {
namespace msgs {

// ===================================================================

class RobotState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.RobotState) */ {
 public:
  RobotState();
  virtual ~RobotState();

  RobotState(const RobotState& from);

  inline RobotState& operator=(const RobotState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotState(RobotState&& from) noexcept
    : RobotState() {
    *this = ::std::move(from);
  }

  inline RobotState& operator=(RobotState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotState* internal_default_instance() {
    return reinterpret_cast<const RobotState*>(
               &_RobotState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RobotState* other);
  friend void swap(RobotState& a, RobotState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotState* New() const PROTOBUF_FINAL { return New(NULL); }

  RobotState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RobotState& from);
  void MergeFrom(const RobotState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RobotState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .gazebo.msgs.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  const ::gazebo::msgs::Pose& pose() const;
  ::gazebo::msgs::Pose* release_pose();
  ::gazebo::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gazebo::msgs::Pose* pose);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:revolve.msgs.RobotState)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_pose();
  void clear_has_pose();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gazebo::msgs::Pose* pose_;
  ::google::protobuf::uint32 id_;
  friend struct ::protobuf_robot_5fstates_2eproto::TableStruct;
  friend void ::protobuf_robot_5fstates_2eproto::InitDefaultsRobotStateImpl();
};
// -------------------------------------------------------------------

class RobotStates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.RobotStates) */ {
 public:
  RobotStates();
  virtual ~RobotStates();

  RobotStates(const RobotStates& from);

  inline RobotStates& operator=(const RobotStates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotStates(RobotStates&& from) noexcept
    : RobotStates() {
    *this = ::std::move(from);
  }

  inline RobotStates& operator=(RobotStates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotStates* internal_default_instance() {
    return reinterpret_cast<const RobotStates*>(
               &_RobotStates_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RobotStates* other);
  friend void swap(RobotStates& a, RobotStates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotStates* New() const PROTOBUF_FINAL { return New(NULL); }

  RobotStates* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RobotStates& from);
  void MergeFrom(const RobotStates& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RobotStates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .revolve.msgs.RobotState robot_state = 2;
  int robot_state_size() const;
  void clear_robot_state();
  static const int kRobotStateFieldNumber = 2;
  const ::revolve::msgs::RobotState& robot_state(int index) const;
  ::revolve::msgs::RobotState* mutable_robot_state(int index);
  ::revolve::msgs::RobotState* add_robot_state();
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::RobotState >*
      mutable_robot_state();
  const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::RobotState >&
      robot_state() const;

  // required .gazebo.msgs.Time time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::gazebo::msgs::Time& time() const;
  ::gazebo::msgs::Time* release_time();
  ::gazebo::msgs::Time* mutable_time();
  void set_allocated_time(::gazebo::msgs::Time* time);

  // @@protoc_insertion_point(class_scope:revolve.msgs.RobotStates)
 private:
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::RobotState > robot_state_;
  ::gazebo::msgs::Time* time_;
  friend struct ::protobuf_robot_5fstates_2eproto::TableStruct;
  friend void ::protobuf_robot_5fstates_2eproto::InitDefaultsRobotStatesImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotState

// required uint32 id = 1;
inline bool RobotState::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotState::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotState::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotState::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RobotState::id() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotState.id)
  return id_;
}
inline void RobotState::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:revolve.msgs.RobotState.id)
}

// required string name = 2;
inline bool RobotState::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotState::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotState::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotState::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RobotState::name() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotState.name)
  return name_.GetNoArena();
}
inline void RobotState::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revolve.msgs.RobotState.name)
}
#if LANG_CXX11
inline void RobotState::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.RobotState.name)
}
#endif
inline void RobotState::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revolve.msgs.RobotState.name)
}
inline void RobotState::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.RobotState.name)
}
inline ::std::string* RobotState::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.RobotState.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RobotState::release_name() {
  // @@protoc_insertion_point(field_release:revolve.msgs.RobotState.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RobotState::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.RobotState.name)
}

// required .gazebo.msgs.Pose pose = 3;
inline bool RobotState::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotState::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotState::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Pose& RobotState::pose() const {
  const ::gazebo::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotState.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Pose*>(
      &::gazebo::msgs::_Pose_default_instance_);
}
inline ::gazebo::msgs::Pose* RobotState::release_pose() {
  // @@protoc_insertion_point(field_release:revolve.msgs.RobotState.pose)
  clear_has_pose();
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Pose* RobotState::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::gazebo::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:revolve.msgs.RobotState.pose)
  return pose_;
}
inline void RobotState::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.RobotState.pose)
}

// -------------------------------------------------------------------

// RobotStates

// required .gazebo.msgs.Time time = 1;
inline bool RobotStates::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStates::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStates::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Time& RobotStates::time() const {
  const ::gazebo::msgs::Time* p = time_;
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotStates.time)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline ::gazebo::msgs::Time* RobotStates::release_time() {
  // @@protoc_insertion_point(field_release:revolve.msgs.RobotStates.time)
  clear_has_time();
  ::gazebo::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Time* RobotStates::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:revolve.msgs.RobotStates.time)
  return time_;
}
inline void RobotStates::set_allocated_time(::gazebo::msgs::Time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
  } else {
    clear_has_time();
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.RobotStates.time)
}

// repeated .revolve.msgs.RobotState robot_state = 2;
inline int RobotStates::robot_state_size() const {
  return robot_state_.size();
}
inline void RobotStates::clear_robot_state() {
  robot_state_.Clear();
}
inline const ::revolve::msgs::RobotState& RobotStates::robot_state(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotStates.robot_state)
  return robot_state_.Get(index);
}
inline ::revolve::msgs::RobotState* RobotStates::mutable_robot_state(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.RobotStates.robot_state)
  return robot_state_.Mutable(index);
}
inline ::revolve::msgs::RobotState* RobotStates::add_robot_state() {
  // @@protoc_insertion_point(field_add:revolve.msgs.RobotStates.robot_state)
  return robot_state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::revolve::msgs::RobotState >*
RobotStates::mutable_robot_state() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.RobotStates.robot_state)
  return &robot_state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::RobotState >&
RobotStates::robot_state() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.RobotStates.robot_state)
  return robot_state_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_robot_5fstates_2eproto__INCLUDED
