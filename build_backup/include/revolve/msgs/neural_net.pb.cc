// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neural_net.proto

#include "neural_net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace revolve {
namespace msgs {
class NeuralConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NeuralConnection>
      _instance;
} _NeuralConnection_default_instance_;
class NeuronDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Neuron>
      _instance;
} _Neuron_default_instance_;
class NeuralNetworkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NeuralNetwork>
      _instance;
} _NeuralNetwork_default_instance_;
class ModifyNeuralNetworkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModifyNeuralNetwork>
      _instance;
} _ModifyNeuralNetwork_default_instance_;
}  // namespace msgs
}  // namespace revolve
namespace protobuf_neural_5fnet_2eproto {
void InitDefaultsNeuralConnectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::revolve::msgs::_NeuralConnection_default_instance_;
    new (ptr) ::revolve::msgs::NeuralConnection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::NeuralConnection::InitAsDefaultInstance();
}

void InitDefaultsNeuralConnection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNeuralConnectionImpl);
}

void InitDefaultsNeuronImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_parameter_2eproto::InitDefaultsParameter();
  {
    void* ptr = &::revolve::msgs::_Neuron_default_instance_;
    new (ptr) ::revolve::msgs::Neuron();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::Neuron::InitAsDefaultInstance();
}

void InitDefaultsNeuron() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNeuronImpl);
}

void InitDefaultsNeuralNetworkImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_neural_5fnet_2eproto::InitDefaultsNeuron();
  protobuf_neural_5fnet_2eproto::InitDefaultsNeuralConnection();
  {
    void* ptr = &::revolve::msgs::_NeuralNetwork_default_instance_;
    new (ptr) ::revolve::msgs::NeuralNetwork();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::NeuralNetwork::InitAsDefaultInstance();
}

void InitDefaultsNeuralNetwork() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNeuralNetworkImpl);
}

void InitDefaultsModifyNeuralNetworkImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_neural_5fnet_2eproto::InitDefaultsNeuron();
  protobuf_neural_5fnet_2eproto::InitDefaultsNeuralConnection();
  {
    void* ptr = &::revolve::msgs::_ModifyNeuralNetwork_default_instance_;
    new (ptr) ::revolve::msgs::ModifyNeuralNetwork();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::ModifyNeuralNetwork::InitAsDefaultInstance();
}

void InitDefaultsModifyNeuralNetwork() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsModifyNeuralNetworkImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::NeuralConnection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::NeuralConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::NeuralConnection, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::NeuralConnection, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::NeuralConnection, weight_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Neuron, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Neuron, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Neuron, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Neuron, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Neuron, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Neuron, partid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Neuron, param_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::NeuralNetwork, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::NeuralNetwork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::NeuralNetwork, neuron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::NeuralNetwork, connection_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::ModifyNeuralNetwork, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::ModifyNeuralNetwork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::ModifyNeuralNetwork, remove_hidden_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::ModifyNeuralNetwork, add_hidden_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::ModifyNeuralNetwork, set_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::ModifyNeuralNetwork, set_weights_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::revolve::msgs::NeuralConnection)},
  { 11, 21, sizeof(::revolve::msgs::Neuron)},
  { 26, 33, sizeof(::revolve::msgs::NeuralNetwork)},
  { 35, 44, sizeof(::revolve::msgs::ModifyNeuralNetwork)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::revolve::msgs::_NeuralConnection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::revolve::msgs::_Neuron_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::revolve::msgs::_NeuralNetwork_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::revolve::msgs::_ModifyNeuralNetwork_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "neural_net.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020neural_net.proto\022\014revolve.msgs\032\017parame"
      "ter.proto\"<\n\020NeuralConnection\022\013\n\003src\030\001 \002"
      "(\t\022\013\n\003dst\030\002 \002(\t\022\016\n\006weight\030\003 \002(\001\"i\n\006Neuro"
      "n\022\n\n\002id\030\001 \002(\t\022\r\n\005layer\030\002 \002(\t\022\014\n\004type\030\003 \002"
      "(\t\022\016\n\006partId\030\004 \001(\t\022&\n\005param\030\005 \003(\0132\027.revo"
      "lve.msgs.Parameter\"i\n\rNeuralNetwork\022$\n\006n"
      "euron\030\001 \003(\0132\024.revolve.msgs.Neuron\0222\n\ncon"
      "nection\030\002 \003(\0132\036.revolve.msgs.NeuralConne"
      "ction\"\271\001\n\023ModifyNeuralNetwork\022\025\n\rremove_"
      "hidden\030\001 \003(\t\022(\n\nadd_hidden\030\002 \003(\0132\024.revol"
      "ve.msgs.Neuron\022,\n\016set_parameters\030\004 \003(\0132\024"
      ".revolve.msgs.Neuron\0223\n\013set_weights\030\003 \003("
      "\0132\036.revolve.msgs.NeuralConnection"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 513);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "neural_net.proto", &protobuf_RegisterTypes);
  ::protobuf_parameter_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_neural_5fnet_2eproto
namespace revolve {
namespace msgs {

// ===================================================================

void NeuralConnection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeuralConnection::kSrcFieldNumber;
const int NeuralConnection::kDstFieldNumber;
const int NeuralConnection::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeuralConnection::NeuralConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_neural_5fnet_2eproto::InitDefaultsNeuralConnection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:revolve.msgs.NeuralConnection)
}
NeuralConnection::NeuralConnection(const NeuralConnection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src()) {
    src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  dst_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dst()) {
    dst_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_);
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.NeuralConnection)
}

void NeuralConnection::SharedCtor() {
  _cached_size_ = 0;
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0;
}

NeuralConnection::~NeuralConnection() {
  // @@protoc_insertion_point(destructor:revolve.msgs.NeuralConnection)
  SharedDtor();
}

void NeuralConnection::SharedDtor() {
  src_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NeuralConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeuralConnection::descriptor() {
  ::protobuf_neural_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_neural_5fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NeuralConnection& NeuralConnection::default_instance() {
  ::protobuf_neural_5fnet_2eproto::InitDefaultsNeuralConnection();
  return *internal_default_instance();
}

NeuralConnection* NeuralConnection::New(::google::protobuf::Arena* arena) const {
  NeuralConnection* n = new NeuralConnection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NeuralConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.NeuralConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!src_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*src_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!dst_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dst_.UnsafeRawStringPointer())->clear();
    }
  }
  weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NeuralConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:revolve.msgs.NeuralConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src().data(), static_cast<int>(this->src().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revolve.msgs.NeuralConnection.src");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string dst = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dst().data(), static_cast<int>(this->dst().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revolve.msgs.NeuralConnection.dst");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:revolve.msgs.NeuralConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:revolve.msgs.NeuralConnection)
  return false;
#undef DO_
}

void NeuralConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:revolve.msgs.NeuralConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), static_cast<int>(this->src().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.NeuralConnection.src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst().data(), static_cast<int>(this->dst().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.NeuralConnection.dst");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dst(), output);
  }

  // required double weight = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:revolve.msgs.NeuralConnection)
}

::google::protobuf::uint8* NeuralConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.NeuralConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), static_cast<int>(this->src().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.NeuralConnection.src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst().data(), static_cast<int>(this->dst().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.NeuralConnection.dst");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  // required double weight = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.NeuralConnection)
  return target;
}

size_t NeuralConnection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:revolve.msgs.NeuralConnection)
  size_t total_size = 0;

  if (has_src()) {
    // required string src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());
  }

  if (has_dst()) {
    // required string dst = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst());
  }

  if (has_weight()) {
    // required double weight = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t NeuralConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.NeuralConnection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());

    // required string dst = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst());

    // required double weight = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeuralConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.NeuralConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const NeuralConnection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NeuralConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.NeuralConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.NeuralConnection)
    MergeFrom(*source);
  }
}

void NeuralConnection::MergeFrom(const NeuralConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.NeuralConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src();
      src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dst();
      dst_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_);
    }
    if (cached_has_bits & 0x00000004u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NeuralConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.NeuralConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeuralConnection::CopyFrom(const NeuralConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.NeuralConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeuralConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void NeuralConnection::Swap(NeuralConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeuralConnection::InternalSwap(NeuralConnection* other) {
  using std::swap;
  src_.Swap(&other->src_);
  dst_.Swap(&other->dst_);
  swap(weight_, other->weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NeuralConnection::GetMetadata() const {
  protobuf_neural_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_neural_5fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Neuron::InitAsDefaultInstance() {
}
void Neuron::clear_param() {
  param_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Neuron::kIdFieldNumber;
const int Neuron::kLayerFieldNumber;
const int Neuron::kTypeFieldNumber;
const int Neuron::kPartIdFieldNumber;
const int Neuron::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Neuron::Neuron()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_neural_5fnet_2eproto::InitDefaultsNeuron();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:revolve.msgs.Neuron)
}
Neuron::Neuron(const Neuron& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      param_(from.param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer()) {
    layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  partid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_partid()) {
    partid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partid_);
  }
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.Neuron)
}

void Neuron::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Neuron::~Neuron() {
  // @@protoc_insertion_point(destructor:revolve.msgs.Neuron)
  SharedDtor();
}

void Neuron::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Neuron::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Neuron::descriptor() {
  ::protobuf_neural_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_neural_5fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Neuron& Neuron::default_instance() {
  ::protobuf_neural_5fnet_2eproto::InitDefaultsNeuron();
  return *internal_default_instance();
}

Neuron* Neuron::New(::google::protobuf::Arena* arena) const {
  Neuron* n = new Neuron;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Neuron::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.Neuron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!layer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*layer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!partid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*partid_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Neuron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:revolve.msgs.Neuron)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revolve.msgs.Neuron.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string layer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer().data(), static_cast<int>(this->layer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revolve.msgs.Neuron.layer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revolve.msgs.Neuron.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string partId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partid().data(), static_cast<int>(this->partid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revolve.msgs.Neuron.partId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .revolve.msgs.Parameter param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:revolve.msgs.Neuron)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:revolve.msgs.Neuron)
  return false;
#undef DO_
}

void Neuron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:revolve.msgs.Neuron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.Neuron.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), static_cast<int>(this->layer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.Neuron.layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layer(), output);
  }

  // required string type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.Neuron.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional string partId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partid().data(), static_cast<int>(this->partid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.Neuron.partId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->partid(), output);
  }

  // repeated .revolve.msgs.Parameter param = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->param(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:revolve.msgs.Neuron)
}

::google::protobuf::uint8* Neuron::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.Neuron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.Neuron.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), static_cast<int>(this->layer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.Neuron.layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer(), target);
  }

  // required string type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.Neuron.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional string partId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partid().data(), static_cast<int>(this->partid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.Neuron.partId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->partid(), target);
  }

  // repeated .revolve.msgs.Parameter param = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->param(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.Neuron)
  return target;
}

size_t Neuron::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:revolve.msgs.Neuron)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_layer()) {
    // required string layer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->layer());
  }

  if (has_type()) {
    // required string type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
size_t Neuron::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.Neuron)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string layer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->layer());

    // required string type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .revolve.msgs.Parameter param = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->param(static_cast<int>(i)));
    }
  }

  // optional string partId = 4;
  if (has_partid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Neuron::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.Neuron)
  GOOGLE_DCHECK_NE(&from, this);
  const Neuron* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Neuron>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.Neuron)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.Neuron)
    MergeFrom(*source);
  }
}

void Neuron::MergeFrom(const Neuron& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.Neuron)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_layer();
      layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_partid();
      partid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partid_);
    }
  }
}

void Neuron::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.Neuron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neuron::CopyFrom(const Neuron& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.Neuron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neuron::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void Neuron::Swap(Neuron* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Neuron::InternalSwap(Neuron* other) {
  using std::swap;
  param_.InternalSwap(&other->param_);
  id_.Swap(&other->id_);
  layer_.Swap(&other->layer_);
  type_.Swap(&other->type_);
  partid_.Swap(&other->partid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Neuron::GetMetadata() const {
  protobuf_neural_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_neural_5fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NeuralNetwork::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeuralNetwork::kNeuronFieldNumber;
const int NeuralNetwork::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeuralNetwork::NeuralNetwork()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_neural_5fnet_2eproto::InitDefaultsNeuralNetwork();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:revolve.msgs.NeuralNetwork)
}
NeuralNetwork::NeuralNetwork(const NeuralNetwork& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      neuron_(from.neuron_),
      connection_(from.connection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.NeuralNetwork)
}

void NeuralNetwork::SharedCtor() {
  _cached_size_ = 0;
}

NeuralNetwork::~NeuralNetwork() {
  // @@protoc_insertion_point(destructor:revolve.msgs.NeuralNetwork)
  SharedDtor();
}

void NeuralNetwork::SharedDtor() {
}

void NeuralNetwork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeuralNetwork::descriptor() {
  ::protobuf_neural_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_neural_5fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NeuralNetwork& NeuralNetwork::default_instance() {
  ::protobuf_neural_5fnet_2eproto::InitDefaultsNeuralNetwork();
  return *internal_default_instance();
}

NeuralNetwork* NeuralNetwork::New(::google::protobuf::Arena* arena) const {
  NeuralNetwork* n = new NeuralNetwork;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NeuralNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.NeuralNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neuron_.Clear();
  connection_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NeuralNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:revolve.msgs.NeuralNetwork)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .revolve.msgs.Neuron neuron = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_neuron()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .revolve.msgs.NeuralConnection connection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:revolve.msgs.NeuralNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:revolve.msgs.NeuralNetwork)
  return false;
#undef DO_
}

void NeuralNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:revolve.msgs.NeuralNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .revolve.msgs.Neuron neuron = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neuron_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->neuron(static_cast<int>(i)), output);
  }

  // repeated .revolve.msgs.NeuralConnection connection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connection(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:revolve.msgs.NeuralNetwork)
}

::google::protobuf::uint8* NeuralNetwork::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.NeuralNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .revolve.msgs.Neuron neuron = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neuron_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->neuron(static_cast<int>(i)), deterministic, target);
  }

  // repeated .revolve.msgs.NeuralConnection connection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->connection(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.NeuralNetwork)
  return target;
}

size_t NeuralNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.NeuralNetwork)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .revolve.msgs.Neuron neuron = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->neuron_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->neuron(static_cast<int>(i)));
    }
  }

  // repeated .revolve.msgs.NeuralConnection connection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->connection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connection(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeuralNetwork::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.NeuralNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  const NeuralNetwork* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NeuralNetwork>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.NeuralNetwork)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.NeuralNetwork)
    MergeFrom(*source);
  }
}

void NeuralNetwork::MergeFrom(const NeuralNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.NeuralNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neuron_.MergeFrom(from.neuron_);
  connection_.MergeFrom(from.connection_);
}

void NeuralNetwork::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.NeuralNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeuralNetwork::CopyFrom(const NeuralNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.NeuralNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeuralNetwork::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->neuron())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->connection())) return false;
  return true;
}

void NeuralNetwork::Swap(NeuralNetwork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeuralNetwork::InternalSwap(NeuralNetwork* other) {
  using std::swap;
  neuron_.InternalSwap(&other->neuron_);
  connection_.InternalSwap(&other->connection_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NeuralNetwork::GetMetadata() const {
  protobuf_neural_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_neural_5fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModifyNeuralNetwork::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyNeuralNetwork::kRemoveHiddenFieldNumber;
const int ModifyNeuralNetwork::kAddHiddenFieldNumber;
const int ModifyNeuralNetwork::kSetParametersFieldNumber;
const int ModifyNeuralNetwork::kSetWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyNeuralNetwork::ModifyNeuralNetwork()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_neural_5fnet_2eproto::InitDefaultsModifyNeuralNetwork();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:revolve.msgs.ModifyNeuralNetwork)
}
ModifyNeuralNetwork::ModifyNeuralNetwork(const ModifyNeuralNetwork& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      remove_hidden_(from.remove_hidden_),
      add_hidden_(from.add_hidden_),
      set_weights_(from.set_weights_),
      set_parameters_(from.set_parameters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.ModifyNeuralNetwork)
}

void ModifyNeuralNetwork::SharedCtor() {
  _cached_size_ = 0;
}

ModifyNeuralNetwork::~ModifyNeuralNetwork() {
  // @@protoc_insertion_point(destructor:revolve.msgs.ModifyNeuralNetwork)
  SharedDtor();
}

void ModifyNeuralNetwork::SharedDtor() {
}

void ModifyNeuralNetwork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyNeuralNetwork::descriptor() {
  ::protobuf_neural_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_neural_5fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModifyNeuralNetwork& ModifyNeuralNetwork::default_instance() {
  ::protobuf_neural_5fnet_2eproto::InitDefaultsModifyNeuralNetwork();
  return *internal_default_instance();
}

ModifyNeuralNetwork* ModifyNeuralNetwork::New(::google::protobuf::Arena* arena) const {
  ModifyNeuralNetwork* n = new ModifyNeuralNetwork;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifyNeuralNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.ModifyNeuralNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remove_hidden_.Clear();
  add_hidden_.Clear();
  set_weights_.Clear();
  set_parameters_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModifyNeuralNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:revolve.msgs.ModifyNeuralNetwork)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string remove_hidden = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_remove_hidden()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remove_hidden(this->remove_hidden_size() - 1).data(),
            static_cast<int>(this->remove_hidden(this->remove_hidden_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revolve.msgs.ModifyNeuralNetwork.remove_hidden");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .revolve.msgs.Neuron add_hidden = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_add_hidden()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .revolve.msgs.NeuralConnection set_weights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_set_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .revolve.msgs.Neuron set_parameters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_set_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:revolve.msgs.ModifyNeuralNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:revolve.msgs.ModifyNeuralNetwork)
  return false;
#undef DO_
}

void ModifyNeuralNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:revolve.msgs.ModifyNeuralNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string remove_hidden = 1;
  for (int i = 0, n = this->remove_hidden_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remove_hidden(i).data(), static_cast<int>(this->remove_hidden(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.ModifyNeuralNetwork.remove_hidden");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->remove_hidden(i), output);
  }

  // repeated .revolve.msgs.Neuron add_hidden = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->add_hidden_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->add_hidden(static_cast<int>(i)), output);
  }

  // repeated .revolve.msgs.NeuralConnection set_weights = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_weights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->set_weights(static_cast<int>(i)), output);
  }

  // repeated .revolve.msgs.Neuron set_parameters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_parameters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->set_parameters(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:revolve.msgs.ModifyNeuralNetwork)
}

::google::protobuf::uint8* ModifyNeuralNetwork::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.ModifyNeuralNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string remove_hidden = 1;
  for (int i = 0, n = this->remove_hidden_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remove_hidden(i).data(), static_cast<int>(this->remove_hidden(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.ModifyNeuralNetwork.remove_hidden");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->remove_hidden(i), target);
  }

  // repeated .revolve.msgs.Neuron add_hidden = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->add_hidden_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->add_hidden(static_cast<int>(i)), deterministic, target);
  }

  // repeated .revolve.msgs.NeuralConnection set_weights = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_weights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->set_weights(static_cast<int>(i)), deterministic, target);
  }

  // repeated .revolve.msgs.Neuron set_parameters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_parameters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->set_parameters(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.ModifyNeuralNetwork)
  return target;
}

size_t ModifyNeuralNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.ModifyNeuralNetwork)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string remove_hidden = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remove_hidden_size());
  for (int i = 0, n = this->remove_hidden_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->remove_hidden(i));
  }

  // repeated .revolve.msgs.Neuron add_hidden = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->add_hidden_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->add_hidden(static_cast<int>(i)));
    }
  }

  // repeated .revolve.msgs.NeuralConnection set_weights = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->set_weights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->set_weights(static_cast<int>(i)));
    }
  }

  // repeated .revolve.msgs.Neuron set_parameters = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->set_parameters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->set_parameters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyNeuralNetwork::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.ModifyNeuralNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyNeuralNetwork* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyNeuralNetwork>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.ModifyNeuralNetwork)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.ModifyNeuralNetwork)
    MergeFrom(*source);
  }
}

void ModifyNeuralNetwork::MergeFrom(const ModifyNeuralNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.ModifyNeuralNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remove_hidden_.MergeFrom(from.remove_hidden_);
  add_hidden_.MergeFrom(from.add_hidden_);
  set_weights_.MergeFrom(from.set_weights_);
  set_parameters_.MergeFrom(from.set_parameters_);
}

void ModifyNeuralNetwork::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.ModifyNeuralNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyNeuralNetwork::CopyFrom(const ModifyNeuralNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.ModifyNeuralNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyNeuralNetwork::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->add_hidden())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->set_weights())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->set_parameters())) return false;
  return true;
}

void ModifyNeuralNetwork::Swap(ModifyNeuralNetwork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifyNeuralNetwork::InternalSwap(ModifyNeuralNetwork* other) {
  using std::swap;
  remove_hidden_.InternalSwap(&other->remove_hidden_);
  add_hidden_.InternalSwap(&other->add_hidden_);
  set_weights_.InternalSwap(&other->set_weights_);
  set_parameters_.InternalSwap(&other->set_parameters_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyNeuralNetwork::GetMetadata() const {
  protobuf_neural_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_neural_5fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)
