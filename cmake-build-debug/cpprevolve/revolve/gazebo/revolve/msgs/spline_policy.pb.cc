// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spline_policy.proto

#include "spline_policy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_parameter_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_parameter_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Parameter;
}  // namespace protobuf_parameter_2eproto
namespace revolve {
namespace msgs {
class SplineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Spline>
      _instance;
} _Spline_default_instance_;
class PolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Policy>
      _instance;
} _Policy_default_instance_;
class ModifyPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModifyPolicy>
      _instance;
} _ModifyPolicy_default_instance_;
}  // namespace msgs
}  // namespace revolve
namespace protobuf_spline_5fpolicy_2eproto {
static void InitDefaultsSpline() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::revolve::msgs::_Spline_default_instance_;
    new (ptr) ::revolve::msgs::Spline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::Spline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Spline =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpline}, {
      &protobuf_parameter_2eproto::scc_info_Parameter.base,}};

static void InitDefaultsPolicy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::revolve::msgs::_Policy_default_instance_;
    new (ptr) ::revolve::msgs::Policy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::Policy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Policy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPolicy}, {}};

static void InitDefaultsModifyPolicy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::revolve::msgs::_ModifyPolicy_default_instance_;
    new (ptr) ::revolve::msgs::ModifyPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::ModifyPolicy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModifyPolicy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModifyPolicy}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Spline.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Policy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModifyPolicy.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Spline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Spline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Spline, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Spline, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Spline, param_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Policy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Policy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Policy, index_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::ModifyPolicy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::ModifyPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::ModifyPolicy, add_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::ModifyPolicy, interpolate_),
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::revolve::msgs::Spline)},
  { 11, 17, sizeof(::revolve::msgs::Policy)},
  { 18, 25, sizeof(::revolve::msgs::ModifyPolicy)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::revolve::msgs::_Spline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::revolve::msgs::_Policy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::revolve::msgs::_ModifyPolicy_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "spline_policy.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023spline_policy.proto\022\014revolve.msgs\032\017par"
      "ameter.proto\"M\n\006Spline\022\r\n\005index\030\001 \002(\005\022\014\n"
      "\004size\030\002 \002(\005\022&\n\005param\030\005 \003(\0132\027.revolve.msg"
      "s.Parameter\"\027\n\006Policy\022\r\n\005index\030\001 \003(\005\"6\n\014"
      "ModifyPolicy\022\021\n\tadd_point\030\001 \003(\001\022\023\n\013inter"
      "polate\030\002 \003(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spline_policy.proto", &protobuf_RegisterTypes);
  ::protobuf_parameter_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_spline_5fpolicy_2eproto
namespace revolve {
namespace msgs {

// ===================================================================

void Spline::InitAsDefaultInstance() {
}
void Spline::clear_param() {
  param_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Spline::kIndexFieldNumber;
const int Spline::kSizeFieldNumber;
const int Spline::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Spline::Spline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spline_5fpolicy_2eproto::scc_info_Spline.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:revolve.msgs.Spline)
}
Spline::Spline(const Spline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      param_(from.param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&index_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.Spline)
}

void Spline::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&index_)) + sizeof(size_));
}

Spline::~Spline() {
  // @@protoc_insertion_point(destructor:revolve.msgs.Spline)
  SharedDtor();
}

void Spline::SharedDtor() {
}

void Spline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Spline::descriptor() {
  ::protobuf_spline_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spline_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Spline& Spline::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spline_5fpolicy_2eproto::scc_info_Spline.base);
  return *internal_default_instance();
}


void Spline::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.Spline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&index_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Spline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:revolve.msgs.Spline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .revolve.msgs.Parameter param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:revolve.msgs.Spline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:revolve.msgs.Spline)
  return false;
#undef DO_
}

void Spline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:revolve.msgs.Spline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // repeated .revolve.msgs.Parameter param = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->param(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:revolve.msgs.Spline)
}

::google::protobuf::uint8* Spline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.Spline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // repeated .revolve.msgs.Parameter param = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->param(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.Spline)
  return target;
}

size_t Spline::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:revolve.msgs.Spline)
  size_t total_size = 0;

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_size()) {
    // required int32 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  return total_size;
}
size_t Spline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.Spline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .revolve.msgs.Parameter param = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->param(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Spline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.Spline)
  GOOGLE_DCHECK_NE(&from, this);
  const Spline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Spline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.Spline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.Spline)
    MergeFrom(*source);
  }
}

void Spline::MergeFrom(const Spline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.Spline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Spline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.Spline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spline::CopyFrom(const Spline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.Spline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void Spline::Swap(Spline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Spline::InternalSwap(Spline* other) {
  using std::swap;
  CastToBase(&param_)->InternalSwap(CastToBase(&other->param_));
  swap(index_, other->index_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Spline::GetMetadata() const {
  protobuf_spline_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spline_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Policy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Policy::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Policy::Policy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spline_5fpolicy_2eproto::scc_info_Policy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:revolve.msgs.Policy)
}
Policy::Policy(const Policy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      index_(from.index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.Policy)
}

void Policy::SharedCtor() {
}

Policy::~Policy() {
  // @@protoc_insertion_point(destructor:revolve.msgs.Policy)
  SharedDtor();
}

void Policy::SharedDtor() {
}

void Policy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Policy::descriptor() {
  ::protobuf_spline_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spline_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Policy& Policy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spline_5fpolicy_2eproto::scc_info_Policy.base);
  return *internal_default_instance();
}


void Policy::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.Policy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Policy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:revolve.msgs.Policy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:revolve.msgs.Policy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:revolve.msgs.Policy)
  return false;
#undef DO_
}

void Policy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:revolve.msgs.Policy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 index = 1;
  for (int i = 0, n = this->index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->index(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:revolve.msgs.Policy)
}

::google::protobuf::uint8* Policy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.Policy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 index = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->index_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.Policy)
  return target;
}

size_t Policy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.Policy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 index = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->index_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->index_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Policy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  const Policy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Policy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.Policy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.Policy)
    MergeFrom(*source);
  }
}

void Policy::MergeFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
}

void Policy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Policy::CopyFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Policy::IsInitialized() const {
  return true;
}

void Policy::Swap(Policy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Policy::InternalSwap(Policy* other) {
  using std::swap;
  index_.InternalSwap(&other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Policy::GetMetadata() const {
  protobuf_spline_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spline_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModifyPolicy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyPolicy::kAddPointFieldNumber;
const int ModifyPolicy::kInterpolateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyPolicy::ModifyPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spline_5fpolicy_2eproto::scc_info_ModifyPolicy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:revolve.msgs.ModifyPolicy)
}
ModifyPolicy::ModifyPolicy(const ModifyPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      add_point_(from.add_point_),
      interpolate_(from.interpolate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.ModifyPolicy)
}

void ModifyPolicy::SharedCtor() {
}

ModifyPolicy::~ModifyPolicy() {
  // @@protoc_insertion_point(destructor:revolve.msgs.ModifyPolicy)
  SharedDtor();
}

void ModifyPolicy::SharedDtor() {
}

void ModifyPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModifyPolicy::descriptor() {
  ::protobuf_spline_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spline_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModifyPolicy& ModifyPolicy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spline_5fpolicy_2eproto::scc_info_ModifyPolicy.base);
  return *internal_default_instance();
}


void ModifyPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.ModifyPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  add_point_.Clear();
  interpolate_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModifyPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:revolve.msgs.ModifyPolicy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double add_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_add_point())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_add_point())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string interpolate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_interpolate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interpolate(this->interpolate_size() - 1).data(),
            static_cast<int>(this->interpolate(this->interpolate_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revolve.msgs.ModifyPolicy.interpolate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:revolve.msgs.ModifyPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:revolve.msgs.ModifyPolicy)
  return false;
#undef DO_
}

void ModifyPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:revolve.msgs.ModifyPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double add_point = 1;
  for (int i = 0, n = this->add_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->add_point(i), output);
  }

  // repeated string interpolate = 2;
  for (int i = 0, n = this->interpolate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interpolate(i).data(), static_cast<int>(this->interpolate(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.ModifyPolicy.interpolate");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->interpolate(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:revolve.msgs.ModifyPolicy)
}

::google::protobuf::uint8* ModifyPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.ModifyPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double add_point = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->add_point_, target);

  // repeated string interpolate = 2;
  for (int i = 0, n = this->interpolate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interpolate(i).data(), static_cast<int>(this->interpolate(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revolve.msgs.ModifyPolicy.interpolate");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->interpolate(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.ModifyPolicy)
  return target;
}

size_t ModifyPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.ModifyPolicy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double add_point = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->add_point_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->add_point_size());
    total_size += data_size;
  }

  // repeated string interpolate = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->interpolate_size());
  for (int i = 0, n = this->interpolate_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->interpolate(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.ModifyPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.ModifyPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.ModifyPolicy)
    MergeFrom(*source);
  }
}

void ModifyPolicy::MergeFrom(const ModifyPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.ModifyPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  add_point_.MergeFrom(from.add_point_);
  interpolate_.MergeFrom(from.interpolate_);
}

void ModifyPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.ModifyPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPolicy::CopyFrom(const ModifyPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.ModifyPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPolicy::IsInitialized() const {
  return true;
}

void ModifyPolicy::Swap(ModifyPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifyPolicy::InternalSwap(ModifyPolicy* other) {
  using std::swap;
  add_point_.InternalSwap(&other->add_point_);
  interpolate_.InternalSwap(CastToBase(&other->interpolate_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModifyPolicy::GetMetadata() const {
  protobuf_spline_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spline_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace revolve
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::revolve::msgs::Spline* Arena::CreateMaybeMessage< ::revolve::msgs::Spline >(Arena* arena) {
  return Arena::CreateInternal< ::revolve::msgs::Spline >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::revolve::msgs::Policy* Arena::CreateMaybeMessage< ::revolve::msgs::Policy >(Arena* arena) {
  return Arena::CreateInternal< ::revolve::msgs::Policy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::revolve::msgs::ModifyPolicy* Arena::CreateMaybeMessage< ::revolve::msgs::ModifyPolicy >(Arena* arena) {
  return Arena::CreateInternal< ::revolve::msgs::ModifyPolicy >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
