// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_inserted.proto

#ifndef PROTOBUF_INCLUDED_model_5finserted_2eproto
#define PROTOBUF_INCLUDED_model_5finserted_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "model.pb.h"
#include "time.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_model_5finserted_2eproto 

namespace protobuf_model_5finserted_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_model_5finserted_2eproto
namespace revolve {
namespace msgs {
class ModelInserted;
class ModelInsertedDefaultTypeInternal;
extern ModelInsertedDefaultTypeInternal _ModelInserted_default_instance_;
}  // namespace msgs
}  // namespace revolve
namespace google {
namespace protobuf {
template<> ::revolve::msgs::ModelInserted* Arena::CreateMaybeMessage<::revolve::msgs::ModelInserted>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace revolve {
namespace msgs {

// ===================================================================

class ModelInserted : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.ModelInserted) */ {
 public:
  ModelInserted();
  virtual ~ModelInserted();

  ModelInserted(const ModelInserted& from);

  inline ModelInserted& operator=(const ModelInserted& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelInserted(ModelInserted&& from) noexcept
    : ModelInserted() {
    *this = ::std::move(from);
  }

  inline ModelInserted& operator=(ModelInserted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelInserted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelInserted* internal_default_instance() {
    return reinterpret_cast<const ModelInserted*>(
               &_ModelInserted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ModelInserted* other);
  friend void swap(ModelInserted& a, ModelInserted& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelInserted* New() const final {
    return CreateMaybeMessage<ModelInserted>(NULL);
  }

  ModelInserted* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModelInserted>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModelInserted& from);
  void MergeFrom(const ModelInserted& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelInserted* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Time time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  private:
  const ::gazebo::msgs::Time& _internal_time() const;
  public:
  const ::gazebo::msgs::Time& time() const;
  ::gazebo::msgs::Time* release_time();
  ::gazebo::msgs::Time* mutable_time();
  void set_allocated_time(::gazebo::msgs::Time* time);

  // required .gazebo.msgs.Model model = 2;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 2;
  private:
  const ::gazebo::msgs::Model& _internal_model() const;
  public:
  const ::gazebo::msgs::Model& model() const;
  ::gazebo::msgs::Model* release_model();
  ::gazebo::msgs::Model* mutable_model();
  void set_allocated_model(::gazebo::msgs::Model* model);

  // @@protoc_insertion_point(class_scope:revolve.msgs.ModelInserted)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_model();
  void clear_has_model();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Time* time_;
  ::gazebo::msgs::Model* model_;
  friend struct ::protobuf_model_5finserted_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelInserted

// required .gazebo.msgs.Time time = 1;
inline bool ModelInserted::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelInserted::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelInserted::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Time& ModelInserted::_internal_time() const {
  return *time_;
}
inline const ::gazebo::msgs::Time& ModelInserted::time() const {
  const ::gazebo::msgs::Time* p = time_;
  // @@protoc_insertion_point(field_get:revolve.msgs.ModelInserted.time)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline ::gazebo::msgs::Time* ModelInserted::release_time() {
  // @@protoc_insertion_point(field_release:revolve.msgs.ModelInserted.time)
  clear_has_time();
  ::gazebo::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Time* ModelInserted::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:revolve.msgs.ModelInserted.time)
  return time_;
}
inline void ModelInserted::set_allocated_time(::gazebo::msgs::Time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
  } else {
    clear_has_time();
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.ModelInserted.time)
}

// required .gazebo.msgs.Model model = 2;
inline bool ModelInserted::has_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelInserted::set_has_model() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelInserted::clear_has_model() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Model& ModelInserted::_internal_model() const {
  return *model_;
}
inline const ::gazebo::msgs::Model& ModelInserted::model() const {
  const ::gazebo::msgs::Model* p = model_;
  // @@protoc_insertion_point(field_get:revolve.msgs.ModelInserted.model)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Model*>(
      &::gazebo::msgs::_Model_default_instance_);
}
inline ::gazebo::msgs::Model* ModelInserted::release_model() {
  // @@protoc_insertion_point(field_release:revolve.msgs.ModelInserted.model)
  clear_has_model();
  ::gazebo::msgs::Model* temp = model_;
  model_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Model* ModelInserted::mutable_model() {
  set_has_model();
  if (model_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Model>(GetArenaNoVirtual());
    model_ = p;
  }
  // @@protoc_insertion_point(field_mutable:revolve.msgs.ModelInserted.model)
  return model_;
}
inline void ModelInserted::set_allocated_model(::gazebo::msgs::Model* model) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(model_);
  }
  if (model) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      model = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    set_has_model();
  } else {
    clear_has_model();
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.ModelInserted.model)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_model_5finserted_2eproto
