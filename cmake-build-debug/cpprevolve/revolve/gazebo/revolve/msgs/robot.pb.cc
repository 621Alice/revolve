// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#include "robot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_body_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_body_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Body;
}  // namespace protobuf_body_2eproto
namespace protobuf_neural_5fnet_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_neural_5fnet_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_NeuralNetwork;
}  // namespace protobuf_neural_5fnet_2eproto
namespace revolve {
namespace msgs {
class RobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Robot>
      _instance;
} _Robot_default_instance_;
}  // namespace msgs
}  // namespace revolve
namespace protobuf_robot_2eproto {
static void InitDefaultsRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::revolve::msgs::_Robot_default_instance_;
    new (ptr) ::revolve::msgs::Robot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::Robot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Robot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRobot}, {
      &protobuf_body_2eproto::scc_info_Body.base,
      &protobuf_neural_5fnet_2eproto::scc_info_NeuralNetwork.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Robot.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Robot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Robot, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Robot, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::revolve::msgs::Robot, brain_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::revolve::msgs::Robot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::revolve::msgs::_Robot_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "robot.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013robot.proto\022\014revolve.msgs\032\nbody.proto\032"
      "\020neural_net.proto\"a\n\005Robot\022\n\n\002id\030\001 \002(\005\022 "
      "\n\004body\030\002 \002(\0132\022.revolve.msgs.Body\022*\n\005brai"
      "n\030\003 \002(\0132\033.revolve.msgs.NeuralNetwork"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 156);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot.proto", &protobuf_RegisterTypes);
  ::protobuf_body_2eproto::AddDescriptors();
  ::protobuf_neural_5fnet_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_robot_2eproto
namespace revolve {
namespace msgs {

// ===================================================================

void Robot::InitAsDefaultInstance() {
  ::revolve::msgs::_Robot_default_instance_._instance.get_mutable()->body_ = const_cast< ::revolve::msgs::Body*>(
      ::revolve::msgs::Body::internal_default_instance());
  ::revolve::msgs::_Robot_default_instance_._instance.get_mutable()->brain_ = const_cast< ::revolve::msgs::NeuralNetwork*>(
      ::revolve::msgs::NeuralNetwork::internal_default_instance());
}
void Robot::clear_body() {
  if (body_ != NULL) body_->Clear();
  clear_has_body();
}
void Robot::clear_brain() {
  if (brain_ != NULL) brain_->Clear();
  clear_has_brain();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot::kIdFieldNumber;
const int Robot::kBodyFieldNumber;
const int Robot::kBrainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot::Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_2eproto::scc_info_Robot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:revolve.msgs.Robot)
}
Robot::Robot(const Robot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_body()) {
    body_ = new ::revolve::msgs::Body(*from.body_);
  } else {
    body_ = NULL;
  }
  if (from.has_brain()) {
    brain_ = new ::revolve::msgs::NeuralNetwork(*from.brain_);
  } else {
    brain_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.Robot)
}

void Robot::SharedCtor() {
  ::memset(&body_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&body_)) + sizeof(id_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:revolve.msgs.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
  if (this != internal_default_instance()) delete body_;
  if (this != internal_default_instance()) delete brain_;
}

void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  ::protobuf_robot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robot& Robot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_2eproto::scc_info_Robot.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(body_ != NULL);
      body_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(brain_ != NULL);
      brain_->Clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:revolve.msgs.Robot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .revolve.msgs.Body body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .revolve.msgs.NeuralNetwork brain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:revolve.msgs.Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:revolve.msgs.Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:revolve.msgs.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .revolve.msgs.Body body = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_body(), output);
  }

  // required .revolve.msgs.NeuralNetwork brain = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_brain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:revolve.msgs.Robot)
}

::google::protobuf::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .revolve.msgs.Body body = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_body(), deterministic, target);
  }

  // required .revolve.msgs.NeuralNetwork brain = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_brain(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.Robot)
  return target;
}

size_t Robot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:revolve.msgs.Robot)
  size_t total_size = 0;

  if (has_body()) {
    // required .revolve.msgs.Body body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (has_brain()) {
    // required .revolve.msgs.NeuralNetwork brain = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brain_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.Robot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .revolve.msgs.Body body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_);

    // required .revolve.msgs.NeuralNetwork brain = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brain_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_body()->::revolve::msgs::Body::MergeFrom(from.body());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_brain()->::revolve::msgs::NeuralNetwork::MergeFrom(from.brain());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_body()) {
    if (!this->body_->IsInitialized()) return false;
  }
  if (has_brain()) {
    if (!this->brain_->IsInitialized()) return false;
  }
  return true;
}

void Robot::Swap(Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot::InternalSwap(Robot* other) {
  using std::swap;
  swap(body_, other->body_);
  swap(brain_, other->brain_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_robot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace revolve
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::revolve::msgs::Robot* Arena::CreateMaybeMessage< ::revolve::msgs::Robot >(Arena* arena) {
  return Arena::CreateInternal< ::revolve::msgs::Robot >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
