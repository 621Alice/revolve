// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neural_net.proto

#ifndef PROTOBUF_INCLUDED_neural_5fnet_2eproto
#define PROTOBUF_INCLUDED_neural_5fnet_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "parameter.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_neural_5fnet_2eproto 

namespace protobuf_neural_5fnet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_neural_5fnet_2eproto
namespace revolve {
namespace msgs {
class ModifyNeuralNetwork;
class ModifyNeuralNetworkDefaultTypeInternal;
extern ModifyNeuralNetworkDefaultTypeInternal _ModifyNeuralNetwork_default_instance_;
class NeuralConnection;
class NeuralConnectionDefaultTypeInternal;
extern NeuralConnectionDefaultTypeInternal _NeuralConnection_default_instance_;
class NeuralNetwork;
class NeuralNetworkDefaultTypeInternal;
extern NeuralNetworkDefaultTypeInternal _NeuralNetwork_default_instance_;
class Neuron;
class NeuronDefaultTypeInternal;
extern NeuronDefaultTypeInternal _Neuron_default_instance_;
}  // namespace msgs
}  // namespace revolve
namespace google {
namespace protobuf {
template<> ::revolve::msgs::ModifyNeuralNetwork* Arena::CreateMaybeMessage<::revolve::msgs::ModifyNeuralNetwork>(Arena*);
template<> ::revolve::msgs::NeuralConnection* Arena::CreateMaybeMessage<::revolve::msgs::NeuralConnection>(Arena*);
template<> ::revolve::msgs::NeuralNetwork* Arena::CreateMaybeMessage<::revolve::msgs::NeuralNetwork>(Arena*);
template<> ::revolve::msgs::Neuron* Arena::CreateMaybeMessage<::revolve::msgs::Neuron>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace revolve {
namespace msgs {

// ===================================================================

class NeuralConnection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.NeuralConnection) */ {
 public:
  NeuralConnection();
  virtual ~NeuralConnection();

  NeuralConnection(const NeuralConnection& from);

  inline NeuralConnection& operator=(const NeuralConnection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NeuralConnection(NeuralConnection&& from) noexcept
    : NeuralConnection() {
    *this = ::std::move(from);
  }

  inline NeuralConnection& operator=(NeuralConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeuralConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NeuralConnection* internal_default_instance() {
    return reinterpret_cast<const NeuralConnection*>(
               &_NeuralConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NeuralConnection* other);
  friend void swap(NeuralConnection& a, NeuralConnection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NeuralConnection* New() const final {
    return CreateMaybeMessage<NeuralConnection>(NULL);
  }

  NeuralConnection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NeuralConnection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NeuralConnection& from);
  void MergeFrom(const NeuralConnection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeuralConnection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  const ::std::string& src() const;
  void set_src(const ::std::string& value);
  #if LANG_CXX11
  void set_src(::std::string&& value);
  #endif
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  ::std::string* mutable_src();
  ::std::string* release_src();
  void set_allocated_src(::std::string* src);

  // required string dst = 2;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 2;
  const ::std::string& dst() const;
  void set_dst(const ::std::string& value);
  #if LANG_CXX11
  void set_dst(::std::string&& value);
  #endif
  void set_dst(const char* value);
  void set_dst(const char* value, size_t size);
  ::std::string* mutable_dst();
  ::std::string* release_dst();
  void set_allocated_dst(::std::string* dst);

  // required double weight = 3;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  double weight() const;
  void set_weight(double value);

  // @@protoc_insertion_point(class_scope:revolve.msgs.NeuralConnection)
 private:
  void set_has_src();
  void clear_has_src();
  void set_has_dst();
  void clear_has_dst();
  void set_has_weight();
  void clear_has_weight();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr src_;
  ::google::protobuf::internal::ArenaStringPtr dst_;
  double weight_;
  friend struct ::protobuf_neural_5fnet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Neuron : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.Neuron) */ {
 public:
  Neuron();
  virtual ~Neuron();

  Neuron(const Neuron& from);

  inline Neuron& operator=(const Neuron& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Neuron(Neuron&& from) noexcept
    : Neuron() {
    *this = ::std::move(from);
  }

  inline Neuron& operator=(Neuron&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Neuron& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Neuron* internal_default_instance() {
    return reinterpret_cast<const Neuron*>(
               &_Neuron_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Neuron* other);
  friend void swap(Neuron& a, Neuron& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Neuron* New() const final {
    return CreateMaybeMessage<Neuron>(NULL);
  }

  Neuron* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Neuron>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Neuron& from);
  void MergeFrom(const Neuron& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neuron* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .revolve.msgs.Parameter param = 5;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 5;
  ::revolve::msgs::Parameter* mutable_param(int index);
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Parameter >*
      mutable_param();
  const ::revolve::msgs::Parameter& param(int index) const;
  ::revolve::msgs::Parameter* add_param();
  const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Parameter >&
      param() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string layer = 2;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 2;
  const ::std::string& layer() const;
  void set_layer(const ::std::string& value);
  #if LANG_CXX11
  void set_layer(::std::string&& value);
  #endif
  void set_layer(const char* value);
  void set_layer(const char* value, size_t size);
  ::std::string* mutable_layer();
  ::std::string* release_layer();
  void set_allocated_layer(::std::string* layer);

  // required string type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string partId = 4;
  bool has_partid() const;
  void clear_partid();
  static const int kPartIdFieldNumber = 4;
  const ::std::string& partid() const;
  void set_partid(const ::std::string& value);
  #if LANG_CXX11
  void set_partid(::std::string&& value);
  #endif
  void set_partid(const char* value);
  void set_partid(const char* value, size_t size);
  ::std::string* mutable_partid();
  ::std::string* release_partid();
  void set_allocated_partid(::std::string* partid);

  // @@protoc_insertion_point(class_scope:revolve.msgs.Neuron)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_layer();
  void clear_has_layer();
  void set_has_type();
  void clear_has_type();
  void set_has_partid();
  void clear_has_partid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Parameter > param_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr layer_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr partid_;
  friend struct ::protobuf_neural_5fnet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NeuralNetwork : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.NeuralNetwork) */ {
 public:
  NeuralNetwork();
  virtual ~NeuralNetwork();

  NeuralNetwork(const NeuralNetwork& from);

  inline NeuralNetwork& operator=(const NeuralNetwork& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NeuralNetwork(NeuralNetwork&& from) noexcept
    : NeuralNetwork() {
    *this = ::std::move(from);
  }

  inline NeuralNetwork& operator=(NeuralNetwork&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeuralNetwork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NeuralNetwork* internal_default_instance() {
    return reinterpret_cast<const NeuralNetwork*>(
               &_NeuralNetwork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NeuralNetwork* other);
  friend void swap(NeuralNetwork& a, NeuralNetwork& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NeuralNetwork* New() const final {
    return CreateMaybeMessage<NeuralNetwork>(NULL);
  }

  NeuralNetwork* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NeuralNetwork>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NeuralNetwork& from);
  void MergeFrom(const NeuralNetwork& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeuralNetwork* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .revolve.msgs.Neuron neuron = 1;
  int neuron_size() const;
  void clear_neuron();
  static const int kNeuronFieldNumber = 1;
  ::revolve::msgs::Neuron* mutable_neuron(int index);
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >*
      mutable_neuron();
  const ::revolve::msgs::Neuron& neuron(int index) const;
  ::revolve::msgs::Neuron* add_neuron();
  const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >&
      neuron() const;

  // repeated .revolve.msgs.NeuralConnection connection = 2;
  int connection_size() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 2;
  ::revolve::msgs::NeuralConnection* mutable_connection(int index);
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::NeuralConnection >*
      mutable_connection();
  const ::revolve::msgs::NeuralConnection& connection(int index) const;
  ::revolve::msgs::NeuralConnection* add_connection();
  const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::NeuralConnection >&
      connection() const;

  // @@protoc_insertion_point(class_scope:revolve.msgs.NeuralNetwork)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron > neuron_;
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::NeuralConnection > connection_;
  friend struct ::protobuf_neural_5fnet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModifyNeuralNetwork : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.ModifyNeuralNetwork) */ {
 public:
  ModifyNeuralNetwork();
  virtual ~ModifyNeuralNetwork();

  ModifyNeuralNetwork(const ModifyNeuralNetwork& from);

  inline ModifyNeuralNetwork& operator=(const ModifyNeuralNetwork& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifyNeuralNetwork(ModifyNeuralNetwork&& from) noexcept
    : ModifyNeuralNetwork() {
    *this = ::std::move(from);
  }

  inline ModifyNeuralNetwork& operator=(ModifyNeuralNetwork&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyNeuralNetwork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyNeuralNetwork* internal_default_instance() {
    return reinterpret_cast<const ModifyNeuralNetwork*>(
               &_ModifyNeuralNetwork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ModifyNeuralNetwork* other);
  friend void swap(ModifyNeuralNetwork& a, ModifyNeuralNetwork& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifyNeuralNetwork* New() const final {
    return CreateMaybeMessage<ModifyNeuralNetwork>(NULL);
  }

  ModifyNeuralNetwork* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModifyNeuralNetwork>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModifyNeuralNetwork& from);
  void MergeFrom(const ModifyNeuralNetwork& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyNeuralNetwork* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string remove_hidden = 1;
  int remove_hidden_size() const;
  void clear_remove_hidden();
  static const int kRemoveHiddenFieldNumber = 1;
  const ::std::string& remove_hidden(int index) const;
  ::std::string* mutable_remove_hidden(int index);
  void set_remove_hidden(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_remove_hidden(int index, ::std::string&& value);
  #endif
  void set_remove_hidden(int index, const char* value);
  void set_remove_hidden(int index, const char* value, size_t size);
  ::std::string* add_remove_hidden();
  void add_remove_hidden(const ::std::string& value);
  #if LANG_CXX11
  void add_remove_hidden(::std::string&& value);
  #endif
  void add_remove_hidden(const char* value);
  void add_remove_hidden(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& remove_hidden() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remove_hidden();

  // repeated .revolve.msgs.Neuron add_hidden = 2;
  int add_hidden_size() const;
  void clear_add_hidden();
  static const int kAddHiddenFieldNumber = 2;
  ::revolve::msgs::Neuron* mutable_add_hidden(int index);
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >*
      mutable_add_hidden();
  const ::revolve::msgs::Neuron& add_hidden(int index) const;
  ::revolve::msgs::Neuron* add_add_hidden();
  const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >&
      add_hidden() const;

  // repeated .revolve.msgs.NeuralConnection set_weights = 3;
  int set_weights_size() const;
  void clear_set_weights();
  static const int kSetWeightsFieldNumber = 3;
  ::revolve::msgs::NeuralConnection* mutable_set_weights(int index);
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::NeuralConnection >*
      mutable_set_weights();
  const ::revolve::msgs::NeuralConnection& set_weights(int index) const;
  ::revolve::msgs::NeuralConnection* add_set_weights();
  const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::NeuralConnection >&
      set_weights() const;

  // repeated .revolve.msgs.Neuron set_parameters = 4;
  int set_parameters_size() const;
  void clear_set_parameters();
  static const int kSetParametersFieldNumber = 4;
  ::revolve::msgs::Neuron* mutable_set_parameters(int index);
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >*
      mutable_set_parameters();
  const ::revolve::msgs::Neuron& set_parameters(int index) const;
  ::revolve::msgs::Neuron* add_set_parameters();
  const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >&
      set_parameters() const;

  // @@protoc_insertion_point(class_scope:revolve.msgs.ModifyNeuralNetwork)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remove_hidden_;
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron > add_hidden_;
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::NeuralConnection > set_weights_;
  ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron > set_parameters_;
  friend struct ::protobuf_neural_5fnet_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NeuralConnection

// required string src = 1;
inline bool NeuralConnection::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeuralConnection::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeuralConnection::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeuralConnection::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src();
}
inline const ::std::string& NeuralConnection::src() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.NeuralConnection.src)
  return src_.GetNoArena();
}
inline void NeuralConnection::set_src(const ::std::string& value) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revolve.msgs.NeuralConnection.src)
}
#if LANG_CXX11
inline void NeuralConnection::set_src(::std::string&& value) {
  set_has_src();
  src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.NeuralConnection.src)
}
#endif
inline void NeuralConnection::set_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revolve.msgs.NeuralConnection.src)
}
inline void NeuralConnection::set_src(const char* value, size_t size) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.NeuralConnection.src)
}
inline ::std::string* NeuralConnection::mutable_src() {
  set_has_src();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.NeuralConnection.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NeuralConnection::release_src() {
  // @@protoc_insertion_point(field_release:revolve.msgs.NeuralConnection.src)
  if (!has_src()) {
    return NULL;
  }
  clear_has_src();
  return src_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NeuralConnection::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    set_has_src();
  } else {
    clear_has_src();
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.NeuralConnection.src)
}

// required string dst = 2;
inline bool NeuralConnection::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeuralConnection::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeuralConnection::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeuralConnection::clear_dst() {
  dst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dst();
}
inline const ::std::string& NeuralConnection::dst() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.NeuralConnection.dst)
  return dst_.GetNoArena();
}
inline void NeuralConnection::set_dst(const ::std::string& value) {
  set_has_dst();
  dst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revolve.msgs.NeuralConnection.dst)
}
#if LANG_CXX11
inline void NeuralConnection::set_dst(::std::string&& value) {
  set_has_dst();
  dst_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.NeuralConnection.dst)
}
#endif
inline void NeuralConnection::set_dst(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dst();
  dst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revolve.msgs.NeuralConnection.dst)
}
inline void NeuralConnection::set_dst(const char* value, size_t size) {
  set_has_dst();
  dst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.NeuralConnection.dst)
}
inline ::std::string* NeuralConnection::mutable_dst() {
  set_has_dst();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.NeuralConnection.dst)
  return dst_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NeuralConnection::release_dst() {
  // @@protoc_insertion_point(field_release:revolve.msgs.NeuralConnection.dst)
  if (!has_dst()) {
    return NULL;
  }
  clear_has_dst();
  return dst_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NeuralConnection::set_allocated_dst(::std::string* dst) {
  if (dst != NULL) {
    set_has_dst();
  } else {
    clear_has_dst();
  }
  dst_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst);
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.NeuralConnection.dst)
}

// required double weight = 3;
inline bool NeuralConnection::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeuralConnection::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NeuralConnection::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NeuralConnection::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline double NeuralConnection::weight() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.NeuralConnection.weight)
  return weight_;
}
inline void NeuralConnection::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:revolve.msgs.NeuralConnection.weight)
}

// -------------------------------------------------------------------

// Neuron

// required string id = 1;
inline bool Neuron::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Neuron::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Neuron::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Neuron::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Neuron::id() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Neuron.id)
  return id_.GetNoArena();
}
inline void Neuron::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revolve.msgs.Neuron.id)
}
#if LANG_CXX11
inline void Neuron::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.Neuron.id)
}
#endif
inline void Neuron::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revolve.msgs.Neuron.id)
}
inline void Neuron::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.Neuron.id)
}
inline ::std::string* Neuron::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Neuron.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neuron::release_id() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Neuron.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neuron::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Neuron.id)
}

// required string layer = 2;
inline bool Neuron::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Neuron::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Neuron::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Neuron::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
inline const ::std::string& Neuron::layer() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Neuron.layer)
  return layer_.GetNoArena();
}
inline void Neuron::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revolve.msgs.Neuron.layer)
}
#if LANG_CXX11
inline void Neuron::set_layer(::std::string&& value) {
  set_has_layer();
  layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.Neuron.layer)
}
#endif
inline void Neuron::set_layer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revolve.msgs.Neuron.layer)
}
inline void Neuron::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.Neuron.layer)
}
inline ::std::string* Neuron::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Neuron.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neuron::release_layer() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Neuron.layer)
  if (!has_layer()) {
    return NULL;
  }
  clear_has_layer();
  return layer_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neuron::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Neuron.layer)
}

// required string type = 3;
inline bool Neuron::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Neuron::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Neuron::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Neuron::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Neuron::type() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Neuron.type)
  return type_.GetNoArena();
}
inline void Neuron::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revolve.msgs.Neuron.type)
}
#if LANG_CXX11
inline void Neuron::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.Neuron.type)
}
#endif
inline void Neuron::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revolve.msgs.Neuron.type)
}
inline void Neuron::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.Neuron.type)
}
inline ::std::string* Neuron::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Neuron.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neuron::release_type() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Neuron.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neuron::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Neuron.type)
}

// optional string partId = 4;
inline bool Neuron::has_partid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Neuron::set_has_partid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Neuron::clear_has_partid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Neuron::clear_partid() {
  partid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partid();
}
inline const ::std::string& Neuron::partid() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Neuron.partId)
  return partid_.GetNoArena();
}
inline void Neuron::set_partid(const ::std::string& value) {
  set_has_partid();
  partid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revolve.msgs.Neuron.partId)
}
#if LANG_CXX11
inline void Neuron::set_partid(::std::string&& value) {
  set_has_partid();
  partid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.Neuron.partId)
}
#endif
inline void Neuron::set_partid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_partid();
  partid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revolve.msgs.Neuron.partId)
}
inline void Neuron::set_partid(const char* value, size_t size) {
  set_has_partid();
  partid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.Neuron.partId)
}
inline ::std::string* Neuron::mutable_partid() {
  set_has_partid();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Neuron.partId)
  return partid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neuron::release_partid() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Neuron.partId)
  if (!has_partid()) {
    return NULL;
  }
  clear_has_partid();
  return partid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neuron::set_allocated_partid(::std::string* partid) {
  if (partid != NULL) {
    set_has_partid();
  } else {
    clear_has_partid();
  }
  partid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partid);
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Neuron.partId)
}

// repeated .revolve.msgs.Parameter param = 5;
inline int Neuron::param_size() const {
  return param_.size();
}
inline ::revolve::msgs::Parameter* Neuron::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Neuron.param)
  return param_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Parameter >*
Neuron::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.Neuron.param)
  return &param_;
}
inline const ::revolve::msgs::Parameter& Neuron::param(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Neuron.param)
  return param_.Get(index);
}
inline ::revolve::msgs::Parameter* Neuron::add_param() {
  // @@protoc_insertion_point(field_add:revolve.msgs.Neuron.param)
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Parameter >&
Neuron::param() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.Neuron.param)
  return param_;
}

// -------------------------------------------------------------------

// NeuralNetwork

// repeated .revolve.msgs.Neuron neuron = 1;
inline int NeuralNetwork::neuron_size() const {
  return neuron_.size();
}
inline void NeuralNetwork::clear_neuron() {
  neuron_.Clear();
}
inline ::revolve::msgs::Neuron* NeuralNetwork::mutable_neuron(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.NeuralNetwork.neuron)
  return neuron_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >*
NeuralNetwork::mutable_neuron() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.NeuralNetwork.neuron)
  return &neuron_;
}
inline const ::revolve::msgs::Neuron& NeuralNetwork::neuron(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.NeuralNetwork.neuron)
  return neuron_.Get(index);
}
inline ::revolve::msgs::Neuron* NeuralNetwork::add_neuron() {
  // @@protoc_insertion_point(field_add:revolve.msgs.NeuralNetwork.neuron)
  return neuron_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >&
NeuralNetwork::neuron() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.NeuralNetwork.neuron)
  return neuron_;
}

// repeated .revolve.msgs.NeuralConnection connection = 2;
inline int NeuralNetwork::connection_size() const {
  return connection_.size();
}
inline void NeuralNetwork::clear_connection() {
  connection_.Clear();
}
inline ::revolve::msgs::NeuralConnection* NeuralNetwork::mutable_connection(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.NeuralNetwork.connection)
  return connection_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::revolve::msgs::NeuralConnection >*
NeuralNetwork::mutable_connection() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.NeuralNetwork.connection)
  return &connection_;
}
inline const ::revolve::msgs::NeuralConnection& NeuralNetwork::connection(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.NeuralNetwork.connection)
  return connection_.Get(index);
}
inline ::revolve::msgs::NeuralConnection* NeuralNetwork::add_connection() {
  // @@protoc_insertion_point(field_add:revolve.msgs.NeuralNetwork.connection)
  return connection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::NeuralConnection >&
NeuralNetwork::connection() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.NeuralNetwork.connection)
  return connection_;
}

// -------------------------------------------------------------------

// ModifyNeuralNetwork

// repeated string remove_hidden = 1;
inline int ModifyNeuralNetwork::remove_hidden_size() const {
  return remove_hidden_.size();
}
inline void ModifyNeuralNetwork::clear_remove_hidden() {
  remove_hidden_.Clear();
}
inline const ::std::string& ModifyNeuralNetwork::remove_hidden(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  return remove_hidden_.Get(index);
}
inline ::std::string* ModifyNeuralNetwork::mutable_remove_hidden(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  return remove_hidden_.Mutable(index);
}
inline void ModifyNeuralNetwork::set_remove_hidden(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  remove_hidden_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ModifyNeuralNetwork::set_remove_hidden(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  remove_hidden_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ModifyNeuralNetwork::set_remove_hidden(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_hidden_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline void ModifyNeuralNetwork::set_remove_hidden(int index, const char* value, size_t size) {
  remove_hidden_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline ::std::string* ModifyNeuralNetwork::add_remove_hidden() {
  // @@protoc_insertion_point(field_add_mutable:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  return remove_hidden_.Add();
}
inline void ModifyNeuralNetwork::add_remove_hidden(const ::std::string& value) {
  remove_hidden_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
#if LANG_CXX11
inline void ModifyNeuralNetwork::add_remove_hidden(::std::string&& value) {
  remove_hidden_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
#endif
inline void ModifyNeuralNetwork::add_remove_hidden(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_hidden_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline void ModifyNeuralNetwork::add_remove_hidden(const char* value, size_t size) {
  remove_hidden_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModifyNeuralNetwork::remove_hidden() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  return remove_hidden_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModifyNeuralNetwork::mutable_remove_hidden() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  return &remove_hidden_;
}

// repeated .revolve.msgs.Neuron add_hidden = 2;
inline int ModifyNeuralNetwork::add_hidden_size() const {
  return add_hidden_.size();
}
inline void ModifyNeuralNetwork::clear_add_hidden() {
  add_hidden_.Clear();
}
inline ::revolve::msgs::Neuron* ModifyNeuralNetwork::mutable_add_hidden(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.ModifyNeuralNetwork.add_hidden)
  return add_hidden_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >*
ModifyNeuralNetwork::mutable_add_hidden() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.ModifyNeuralNetwork.add_hidden)
  return &add_hidden_;
}
inline const ::revolve::msgs::Neuron& ModifyNeuralNetwork::add_hidden(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.ModifyNeuralNetwork.add_hidden)
  return add_hidden_.Get(index);
}
inline ::revolve::msgs::Neuron* ModifyNeuralNetwork::add_add_hidden() {
  // @@protoc_insertion_point(field_add:revolve.msgs.ModifyNeuralNetwork.add_hidden)
  return add_hidden_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >&
ModifyNeuralNetwork::add_hidden() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.ModifyNeuralNetwork.add_hidden)
  return add_hidden_;
}

// repeated .revolve.msgs.Neuron set_parameters = 4;
inline int ModifyNeuralNetwork::set_parameters_size() const {
  return set_parameters_.size();
}
inline void ModifyNeuralNetwork::clear_set_parameters() {
  set_parameters_.Clear();
}
inline ::revolve::msgs::Neuron* ModifyNeuralNetwork::mutable_set_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.ModifyNeuralNetwork.set_parameters)
  return set_parameters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >*
ModifyNeuralNetwork::mutable_set_parameters() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.ModifyNeuralNetwork.set_parameters)
  return &set_parameters_;
}
inline const ::revolve::msgs::Neuron& ModifyNeuralNetwork::set_parameters(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.ModifyNeuralNetwork.set_parameters)
  return set_parameters_.Get(index);
}
inline ::revolve::msgs::Neuron* ModifyNeuralNetwork::add_set_parameters() {
  // @@protoc_insertion_point(field_add:revolve.msgs.ModifyNeuralNetwork.set_parameters)
  return set_parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::Neuron >&
ModifyNeuralNetwork::set_parameters() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.ModifyNeuralNetwork.set_parameters)
  return set_parameters_;
}

// repeated .revolve.msgs.NeuralConnection set_weights = 3;
inline int ModifyNeuralNetwork::set_weights_size() const {
  return set_weights_.size();
}
inline void ModifyNeuralNetwork::clear_set_weights() {
  set_weights_.Clear();
}
inline ::revolve::msgs::NeuralConnection* ModifyNeuralNetwork::mutable_set_weights(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.ModifyNeuralNetwork.set_weights)
  return set_weights_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::revolve::msgs::NeuralConnection >*
ModifyNeuralNetwork::mutable_set_weights() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.ModifyNeuralNetwork.set_weights)
  return &set_weights_;
}
inline const ::revolve::msgs::NeuralConnection& ModifyNeuralNetwork::set_weights(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.ModifyNeuralNetwork.set_weights)
  return set_weights_.Get(index);
}
inline ::revolve::msgs::NeuralConnection* ModifyNeuralNetwork::add_set_weights() {
  // @@protoc_insertion_point(field_add:revolve.msgs.ModifyNeuralNetwork.set_weights)
  return set_weights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::revolve::msgs::NeuralConnection >&
ModifyNeuralNetwork::set_weights() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.ModifyNeuralNetwork.set_weights)
  return set_weights_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_neural_5fnet_2eproto
