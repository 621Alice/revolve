// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tolrg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tolrg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tolrg {

namespace {

const ::google::protobuf::Descriptor* EvolvableParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvolvableParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* NeuralConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeuralConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* Neuron_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Neuron_reflection_ = NULL;
const ::google::protobuf::Descriptor* Brain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Brain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tolrg_2eproto() {
  protobuf_AddDesc_tolrg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tolrg.proto");
  GOOGLE_CHECK(file != NULL);
  EvolvableParameter_descriptor_ = file->message_type(0);
  static const int EvolvableParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvableParameter, paramvalue_),
  };
  EvolvableParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvolvableParameter_descriptor_,
      EvolvableParameter::default_instance_,
      EvolvableParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvableParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvableParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvolvableParameter));
  BodyPart_descriptor_ = file->message_type(1);
  static const int BodyPart_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, evolvableparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, orientation_),
  };
  BodyPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BodyPart_descriptor_,
      BodyPart::default_instance_,
      BodyPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BodyPart));
  BodyConnection_descriptor_ = file->message_type(2);
  static const int BodyConnection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, srcslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, destslot_),
  };
  BodyConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BodyConnection_descriptor_,
      BodyConnection::default_instance_,
      BodyConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BodyConnection));
  Body_descriptor_ = file->message_type(3);
  static const int Body_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, connection_),
  };
  Body_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Body_descriptor_,
      Body::default_instance_,
      Body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Body));
  NeuralConnection_descriptor_ = file->message_type(4);
  static const int NeuralConnection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, weight_),
  };
  NeuralConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NeuralConnection_descriptor_,
      NeuralConnection::default_instance_,
      NeuralConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NeuralConnection));
  Neuron_descriptor_ = file->message_type(5);
  static const int Neuron_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, bodypartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, ioid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, phaseoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, gain_),
  };
  Neuron_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Neuron_descriptor_,
      Neuron::default_instance_,
      Neuron_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Neuron));
  Brain_descriptor_ = file->message_type(6);
  static const int Brain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, neuron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, connection_),
  };
  Brain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Brain_descriptor_,
      Brain::default_instance_,
      Brain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Brain));
  Robot_descriptor_ = file->message_type(7);
  static const int Robot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, brain_),
  };
  Robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Robot_descriptor_,
      Robot::default_instance_,
      Robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Robot));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tolrg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvolvableParameter_descriptor_, &EvolvableParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BodyPart_descriptor_, &BodyPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BodyConnection_descriptor_, &BodyConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Body_descriptor_, &Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NeuralConnection_descriptor_, &NeuralConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Neuron_descriptor_, &Neuron::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Brain_descriptor_, &Brain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Robot_descriptor_, &Robot::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tolrg_2eproto() {
  delete EvolvableParameter::default_instance_;
  delete EvolvableParameter_reflection_;
  delete BodyPart::default_instance_;
  delete BodyPart_reflection_;
  delete BodyConnection::default_instance_;
  delete BodyConnection_reflection_;
  delete Body::default_instance_;
  delete Body_reflection_;
  delete NeuralConnection::default_instance_;
  delete NeuralConnection_reflection_;
  delete Neuron::default_instance_;
  delete Neuron_reflection_;
  delete Brain::default_instance_;
  delete Brain_reflection_;
  delete Robot::default_instance_;
  delete Robot_reflection_;
}

void protobuf_AddDesc_tolrg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013tolrg.proto\022\005tolrg\"(\n\022EvolvableParamet"
    "er\022\022\n\nparamValue\030\001 \002(\002\"z\n\010BodyPart\022\n\n\002id"
    "\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\014\n\004root\030\003 \002(\010\0221\n\016ev"
    "olvableParam\030\004 \003(\0132\031.tolrg.EvolvablePara"
    "meter\022\023\n\013orientation\030\005 \002(\005\"N\n\016BodyConnec"
    "tion\022\013\n\003src\030\001 \002(\t\022\014\n\004dest\030\002 \002(\t\022\017\n\007srcSl"
    "ot\030\003 \002(\005\022\020\n\010destSlot\030\004 \002(\005\"P\n\004Body\022\035\n\004pa"
    "rt\030\001 \003(\0132\017.tolrg.BodyPart\022)\n\nconnection\030"
    "\002 \003(\0132\025.tolrg.BodyConnection\"=\n\020NeuralCo"
    "nnection\022\013\n\003src\030\001 \002(\t\022\014\n\004dest\030\002 \002(\t\022\016\n\006w"
    "eight\030\003 \002(\002\"\241\001\n\006Neuron\022\n\n\002id\030\001 \002(\t\022\r\n\005la"
    "yer\030\002 \002(\t\022\014\n\004type\030\003 \002(\t\022\014\n\004bias\030\004 \001(\002\022\022\n"
    "\nbodyPartId\030\005 \001(\t\022\014\n\004ioId\030\006 \001(\005\022\013\n\003tau\030\007"
    " \001(\002\022\023\n\013phaseOffset\030\010 \001(\002\022\016\n\006period\030\t \001("
    "\002\022\014\n\004gain\030\n \001(\002\"S\n\005Brain\022\035\n\006neuron\030\001 \003(\013"
    "2\r.tolrg.Neuron\022+\n\nconnection\030\002 \003(\0132\027.to"
    "lrg.NeuralConnection\"K\n\005Robot\022\n\n\002id\030\001 \002("
    "\005\022\031\n\004body\030\002 \002(\0132\013.tolrg.Body\022\033\n\005brain\030\003 "
    "\002(\0132\014.tolrg.Brain", 737);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tolrg.proto", &protobuf_RegisterTypes);
  EvolvableParameter::default_instance_ = new EvolvableParameter();
  BodyPart::default_instance_ = new BodyPart();
  BodyConnection::default_instance_ = new BodyConnection();
  Body::default_instance_ = new Body();
  NeuralConnection::default_instance_ = new NeuralConnection();
  Neuron::default_instance_ = new Neuron();
  Brain::default_instance_ = new Brain();
  Robot::default_instance_ = new Robot();
  EvolvableParameter::default_instance_->InitAsDefaultInstance();
  BodyPart::default_instance_->InitAsDefaultInstance();
  BodyConnection::default_instance_->InitAsDefaultInstance();
  Body::default_instance_->InitAsDefaultInstance();
  NeuralConnection::default_instance_->InitAsDefaultInstance();
  Neuron::default_instance_->InitAsDefaultInstance();
  Brain::default_instance_->InitAsDefaultInstance();
  Robot::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tolrg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tolrg_2eproto {
  StaticDescriptorInitializer_tolrg_2eproto() {
    protobuf_AddDesc_tolrg_2eproto();
  }
} static_descriptor_initializer_tolrg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EvolvableParameter::kParamValueFieldNumber;
#endif  // !_MSC_VER

EvolvableParameter::EvolvableParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EvolvableParameter::InitAsDefaultInstance() {
}

EvolvableParameter::EvolvableParameter(const EvolvableParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EvolvableParameter::SharedCtor() {
  _cached_size_ = 0;
  paramvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvolvableParameter::~EvolvableParameter() {
  SharedDtor();
}

void EvolvableParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EvolvableParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvolvableParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvolvableParameter_descriptor_;
}

const EvolvableParameter& EvolvableParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tolrg_2eproto();
  return *default_instance_;
}

EvolvableParameter* EvolvableParameter::default_instance_ = NULL;

EvolvableParameter* EvolvableParameter::New() const {
  return new EvolvableParameter;
}

void EvolvableParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    paramvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvolvableParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float paramValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &paramvalue_)));
          set_has_paramvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EvolvableParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float paramValue = 1;
  if (has_paramvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->paramvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EvolvableParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float paramValue = 1;
  if (has_paramvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->paramvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EvolvableParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float paramValue = 1;
    if (has_paramvalue()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvolvableParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvolvableParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvolvableParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvolvableParameter::MergeFrom(const EvolvableParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paramvalue()) {
      set_paramvalue(from.paramvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvolvableParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvolvableParameter::CopyFrom(const EvolvableParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvolvableParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EvolvableParameter::Swap(EvolvableParameter* other) {
  if (other != this) {
    std::swap(paramvalue_, other->paramvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvolvableParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvolvableParameter_descriptor_;
  metadata.reflection = EvolvableParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BodyPart::kIdFieldNumber;
const int BodyPart::kTypeFieldNumber;
const int BodyPart::kRootFieldNumber;
const int BodyPart::kEvolvableParamFieldNumber;
const int BodyPart::kOrientationFieldNumber;
#endif  // !_MSC_VER

BodyPart::BodyPart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BodyPart::InitAsDefaultInstance() {
}

BodyPart::BodyPart(const BodyPart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BodyPart::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  root_ = false;
  orientation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyPart::~BodyPart() {
  SharedDtor();
}

void BodyPart::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void BodyPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyPart_descriptor_;
}

const BodyPart& BodyPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tolrg_2eproto();
  return *default_instance_;
}

BodyPart* BodyPart::default_instance_ = NULL;

BodyPart* BodyPart::New() const {
  return new BodyPart;
}

void BodyPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    root_ = false;
    orientation_ = 0;
  }
  evolvableparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BodyPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_root;
        break;
      }

      // required bool root = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_root:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &root_)));
          set_has_root();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_evolvableParam;
        break;
      }

      // repeated .tolrg.EvolvableParameter evolvableParam = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_evolvableParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_evolvableparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_evolvableParam;
        if (input->ExpectTag(40)) goto parse_orientation;
        break;
      }

      // required int32 orientation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BodyPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required bool root = 3;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->root(), output);
  }

  // repeated .tolrg.EvolvableParameter evolvableParam = 4;
  for (int i = 0; i < this->evolvableparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->evolvableparam(i), output);
  }

  // required int32 orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->orientation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BodyPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required bool root = 3;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->root(), target);
  }

  // repeated .tolrg.EvolvableParameter evolvableParam = 4;
  for (int i = 0; i < this->evolvableparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->evolvableparam(i), target);
  }

  // required int32 orientation = 5;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->orientation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BodyPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required bool root = 3;
    if (has_root()) {
      total_size += 1 + 1;
    }

    // required int32 orientation = 5;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orientation());
    }

  }
  // repeated .tolrg.EvolvableParameter evolvableParam = 4;
  total_size += 1 * this->evolvableparam_size();
  for (int i = 0; i < this->evolvableparam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evolvableparam(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BodyPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BodyPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BodyPart::MergeFrom(const BodyPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  evolvableparam_.MergeFrom(from.evolvableparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_root()) {
      set_root(from.root());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BodyPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyPart::CopyFrom(const BodyPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  for (int i = 0; i < evolvableparam_size(); i++) {
    if (!this->evolvableparam(i).IsInitialized()) return false;
  }
  return true;
}

void BodyPart::Swap(BodyPart* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(root_, other->root_);
    evolvableparam_.Swap(&other->evolvableparam_);
    std::swap(orientation_, other->orientation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BodyPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyPart_descriptor_;
  metadata.reflection = BodyPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BodyConnection::kSrcFieldNumber;
const int BodyConnection::kDestFieldNumber;
const int BodyConnection::kSrcSlotFieldNumber;
const int BodyConnection::kDestSlotFieldNumber;
#endif  // !_MSC_VER

BodyConnection::BodyConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BodyConnection::InitAsDefaultInstance() {
}

BodyConnection::BodyConnection(const BodyConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BodyConnection::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srcslot_ = 0;
  destslot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyConnection::~BodyConnection() {
  SharedDtor();
}

void BodyConnection::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_;
  }
  if (this != default_instance_) {
  }
}

void BodyConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyConnection_descriptor_;
}

const BodyConnection& BodyConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tolrg_2eproto();
  return *default_instance_;
}

BodyConnection* BodyConnection::default_instance_ = NULL;

BodyConnection* BodyConnection::New() const {
  return new BodyConnection;
}

void BodyConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dest()) {
      if (dest_ != &::google::protobuf::internal::kEmptyString) {
        dest_->clear();
      }
    }
    srcslot_ = 0;
    destslot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BodyConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // required string dest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_srcSlot;
        break;
      }

      // required int32 srcSlot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcslot_)));
          set_has_srcslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_destSlot;
        break;
      }

      // required int32 destSlot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destslot_)));
          set_has_destslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BodyConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dest(), output);
  }

  // required int32 srcSlot = 3;
  if (has_srcslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcslot(), output);
  }

  // required int32 destSlot = 4;
  if (has_destslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->destslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BodyConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // required int32 srcSlot = 3;
  if (has_srcslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srcslot(), target);
  }

  // required int32 destSlot = 4;
  if (has_destslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->destslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BodyConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest());
    }

    // required int32 srcSlot = 3;
    if (has_srcslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcslot());
    }

    // required int32 destSlot = 4;
    if (has_destslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destslot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BodyConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BodyConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BodyConnection::MergeFrom(const BodyConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_srcslot()) {
      set_srcslot(from.srcslot());
    }
    if (from.has_destslot()) {
      set_destslot(from.destslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BodyConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyConnection::CopyFrom(const BodyConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BodyConnection::Swap(BodyConnection* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dest_, other->dest_);
    std::swap(srcslot_, other->srcslot_);
    std::swap(destslot_, other->destslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BodyConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyConnection_descriptor_;
  metadata.reflection = BodyConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Body::kPartFieldNumber;
const int Body::kConnectionFieldNumber;
#endif  // !_MSC_VER

Body::Body()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Body::InitAsDefaultInstance() {
}

Body::Body(const Body& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Body::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Body::~Body() {
  SharedDtor();
}

void Body::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Body_descriptor_;
}

const Body& Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tolrg_2eproto();
  return *default_instance_;
}

Body* Body::default_instance_ = NULL;

Body* Body::New() const {
  return new Body;
}

void Body::Clear() {
  part_.Clear();
  connection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tolrg.BodyPart part = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_part()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_part;
        if (input->ExpectTag(18)) goto parse_connection;
        break;
      }

      // repeated .tolrg.BodyConnection connection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connection;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tolrg.BodyPart part = 1;
  for (int i = 0; i < this->part_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->part(i), output);
  }

  // repeated .tolrg.BodyConnection connection = 2;
  for (int i = 0; i < this->connection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connection(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tolrg.BodyPart part = 1;
  for (int i = 0; i < this->part_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->part(i), target);
  }

  // repeated .tolrg.BodyConnection connection = 2;
  for (int i = 0; i < this->connection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->connection(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Body::ByteSize() const {
  int total_size = 0;

  // repeated .tolrg.BodyPart part = 1;
  total_size += 1 * this->part_size();
  for (int i = 0; i < this->part_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->part(i));
  }

  // repeated .tolrg.BodyConnection connection = 2;
  total_size += 1 * this->connection_size();
  for (int i = 0; i < this->connection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connection(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Body* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Body*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
  GOOGLE_CHECK_NE(&from, this);
  part_.MergeFrom(from.part_);
  connection_.MergeFrom(from.connection_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {

  for (int i = 0; i < part_size(); i++) {
    if (!this->part(i).IsInitialized()) return false;
  }
  for (int i = 0; i < connection_size(); i++) {
    if (!this->connection(i).IsInitialized()) return false;
  }
  return true;
}

void Body::Swap(Body* other) {
  if (other != this) {
    part_.Swap(&other->part_);
    connection_.Swap(&other->connection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Body_descriptor_;
  metadata.reflection = Body_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NeuralConnection::kSrcFieldNumber;
const int NeuralConnection::kDestFieldNumber;
const int NeuralConnection::kWeightFieldNumber;
#endif  // !_MSC_VER

NeuralConnection::NeuralConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NeuralConnection::InitAsDefaultInstance() {
}

NeuralConnection::NeuralConnection(const NeuralConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NeuralConnection::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NeuralConnection::~NeuralConnection() {
  SharedDtor();
}

void NeuralConnection::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_;
  }
  if (this != default_instance_) {
  }
}

void NeuralConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeuralConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeuralConnection_descriptor_;
}

const NeuralConnection& NeuralConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tolrg_2eproto();
  return *default_instance_;
}

NeuralConnection* NeuralConnection::default_instance_ = NULL;

NeuralConnection* NeuralConnection::New() const {
  return new NeuralConnection;
}

void NeuralConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dest()) {
      if (dest_ != &::google::protobuf::internal::kEmptyString) {
        dest_->clear();
      }
    }
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NeuralConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // required string dest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_weight;
        break;
      }

      // required float weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NeuralConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dest(), output);
  }

  // required float weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NeuralConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // required float weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NeuralConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest());
    }

    // required float weight = 3;
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeuralConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NeuralConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NeuralConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NeuralConnection::MergeFrom(const NeuralConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NeuralConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeuralConnection::CopyFrom(const NeuralConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeuralConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NeuralConnection::Swap(NeuralConnection* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dest_, other->dest_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NeuralConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeuralConnection_descriptor_;
  metadata.reflection = NeuralConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Neuron::kIdFieldNumber;
const int Neuron::kLayerFieldNumber;
const int Neuron::kTypeFieldNumber;
const int Neuron::kBiasFieldNumber;
const int Neuron::kBodyPartIdFieldNumber;
const int Neuron::kIoIdFieldNumber;
const int Neuron::kTauFieldNumber;
const int Neuron::kPhaseOffsetFieldNumber;
const int Neuron::kPeriodFieldNumber;
const int Neuron::kGainFieldNumber;
#endif  // !_MSC_VER

Neuron::Neuron()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Neuron::InitAsDefaultInstance() {
}

Neuron::Neuron(const Neuron& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Neuron::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bias_ = 0;
  bodypartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ioid_ = 0;
  tau_ = 0;
  phaseoffset_ = 0;
  period_ = 0;
  gain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Neuron::~Neuron() {
  SharedDtor();
}

void Neuron::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (layer_ != &::google::protobuf::internal::kEmptyString) {
    delete layer_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (bodypartid_ != &::google::protobuf::internal::kEmptyString) {
    delete bodypartid_;
  }
  if (this != default_instance_) {
  }
}

void Neuron::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Neuron::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Neuron_descriptor_;
}

const Neuron& Neuron::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tolrg_2eproto();
  return *default_instance_;
}

Neuron* Neuron::default_instance_ = NULL;

Neuron* Neuron::New() const {
  return new Neuron;
}

void Neuron::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_layer()) {
      if (layer_ != &::google::protobuf::internal::kEmptyString) {
        layer_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    bias_ = 0;
    if (has_bodypartid()) {
      if (bodypartid_ != &::google::protobuf::internal::kEmptyString) {
        bodypartid_->clear();
      }
    }
    ioid_ = 0;
    tau_ = 0;
    phaseoffset_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    period_ = 0;
    gain_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Neuron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        break;
      }

      // required string layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->layer().data(), this->layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_bias;
        break;
      }

      // optional float bias = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bodyPartId;
        break;
      }

      // optional string bodyPartId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyPartId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodypartid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bodypartid().data(), this->bodypartid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ioId;
        break;
      }

      // optional int32 ioId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ioId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ioid_)));
          set_has_ioid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_tau;
        break;
      }

      // optional float tau = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_phaseOffset;
        break;
      }

      // optional float phaseOffset = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phaseOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phaseoffset_)));
          set_has_phaseoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_period;
        break;
      }

      // optional float period = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_gain;
        break;
      }

      // optional float gain = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Neuron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->layer(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // optional float bias = 4;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bias(), output);
  }

  // optional string bodyPartId = 5;
  if (has_bodypartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bodypartid().data(), this->bodypartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bodypartid(), output);
  }

  // optional int32 ioId = 6;
  if (has_ioid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ioid(), output);
  }

  // optional float tau = 7;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tau(), output);
  }

  // optional float phaseOffset = 8;
  if (has_phaseoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->phaseoffset(), output);
  }

  // optional float period = 9;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->period(), output);
  }

  // optional float gain = 10;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->gain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Neuron::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional float bias = 4;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bias(), target);
  }

  // optional string bodyPartId = 5;
  if (has_bodypartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bodypartid().data(), this->bodypartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bodypartid(), target);
  }

  // optional int32 ioId = 6;
  if (has_ioid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ioid(), target);
  }

  // optional float tau = 7;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tau(), target);
  }

  // optional float phaseOffset = 8;
  if (has_phaseoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->phaseoffset(), target);
  }

  // optional float period = 9;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->period(), target);
  }

  // optional float gain = 10;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->gain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Neuron::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layer());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float bias = 4;
    if (has_bias()) {
      total_size += 1 + 4;
    }

    // optional string bodyPartId = 5;
    if (has_bodypartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodypartid());
    }

    // optional int32 ioId = 6;
    if (has_ioid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ioid());
    }

    // optional float tau = 7;
    if (has_tau()) {
      total_size += 1 + 4;
    }

    // optional float phaseOffset = 8;
    if (has_phaseoffset()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float period = 9;
    if (has_period()) {
      total_size += 1 + 4;
    }

    // optional float gain = 10;
    if (has_gain()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Neuron::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Neuron* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Neuron*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Neuron::MergeFrom(const Neuron& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bias()) {
      set_bias(from.bias());
    }
    if (from.has_bodypartid()) {
      set_bodypartid(from.bodypartid());
    }
    if (from.has_ioid()) {
      set_ioid(from.ioid());
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
    if (from.has_phaseoffset()) {
      set_phaseoffset(from.phaseoffset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Neuron::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neuron::CopyFrom(const Neuron& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neuron::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Neuron::Swap(Neuron* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(layer_, other->layer_);
    std::swap(type_, other->type_);
    std::swap(bias_, other->bias_);
    std::swap(bodypartid_, other->bodypartid_);
    std::swap(ioid_, other->ioid_);
    std::swap(tau_, other->tau_);
    std::swap(phaseoffset_, other->phaseoffset_);
    std::swap(period_, other->period_);
    std::swap(gain_, other->gain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Neuron::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Neuron_descriptor_;
  metadata.reflection = Neuron_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Brain::kNeuronFieldNumber;
const int Brain::kConnectionFieldNumber;
#endif  // !_MSC_VER

Brain::Brain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Brain::InitAsDefaultInstance() {
}

Brain::Brain(const Brain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Brain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Brain::~Brain() {
  SharedDtor();
}

void Brain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Brain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Brain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Brain_descriptor_;
}

const Brain& Brain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tolrg_2eproto();
  return *default_instance_;
}

Brain* Brain::default_instance_ = NULL;

Brain* Brain::New() const {
  return new Brain;
}

void Brain::Clear() {
  neuron_.Clear();
  connection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Brain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tolrg.Neuron neuron = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_neuron:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_neuron()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_neuron;
        if (input->ExpectTag(18)) goto parse_connection;
        break;
      }

      // repeated .tolrg.NeuralConnection connection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connection;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Brain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tolrg.Neuron neuron = 1;
  for (int i = 0; i < this->neuron_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->neuron(i), output);
  }

  // repeated .tolrg.NeuralConnection connection = 2;
  for (int i = 0; i < this->connection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connection(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Brain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tolrg.Neuron neuron = 1;
  for (int i = 0; i < this->neuron_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->neuron(i), target);
  }

  // repeated .tolrg.NeuralConnection connection = 2;
  for (int i = 0; i < this->connection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->connection(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Brain::ByteSize() const {
  int total_size = 0;

  // repeated .tolrg.Neuron neuron = 1;
  total_size += 1 * this->neuron_size();
  for (int i = 0; i < this->neuron_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->neuron(i));
  }

  // repeated .tolrg.NeuralConnection connection = 2;
  total_size += 1 * this->connection_size();
  for (int i = 0; i < this->connection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connection(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Brain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Brain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Brain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Brain::MergeFrom(const Brain& from) {
  GOOGLE_CHECK_NE(&from, this);
  neuron_.MergeFrom(from.neuron_);
  connection_.MergeFrom(from.connection_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Brain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brain::CopyFrom(const Brain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brain::IsInitialized() const {

  for (int i = 0; i < neuron_size(); i++) {
    if (!this->neuron(i).IsInitialized()) return false;
  }
  for (int i = 0; i < connection_size(); i++) {
    if (!this->connection(i).IsInitialized()) return false;
  }
  return true;
}

void Brain::Swap(Brain* other) {
  if (other != this) {
    neuron_.Swap(&other->neuron_);
    connection_.Swap(&other->connection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Brain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Brain_descriptor_;
  metadata.reflection = Brain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Robot::kIdFieldNumber;
const int Robot::kBodyFieldNumber;
const int Robot::kBrainFieldNumber;
#endif  // !_MSC_VER

Robot::Robot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Robot::InitAsDefaultInstance() {
  body_ = const_cast< ::tolrg::Body*>(&::tolrg::Body::default_instance());
  brain_ = const_cast< ::tolrg::Brain*>(&::tolrg::Brain::default_instance());
}

Robot::Robot(const Robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Robot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  body_ = NULL;
  brain_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robot::~Robot() {
  SharedDtor();
}

void Robot::SharedDtor() {
  if (this != default_instance_) {
    delete body_;
    delete brain_;
  }
}

void Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_descriptor_;
}

const Robot& Robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tolrg_2eproto();
  return *default_instance_;
}

Robot* Robot::default_instance_ = NULL;

Robot* Robot::New() const {
  return new Robot;
}

void Robot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_body()) {
      if (body_ != NULL) body_->::tolrg::Body::Clear();
    }
    if (has_brain()) {
      if (brain_ != NULL) brain_->::tolrg::Brain::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .tolrg.Body body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_brain;
        break;
      }

      // required .tolrg.Brain brain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .tolrg.Body body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  // required .tolrg.Brain brain = 3;
  if (has_brain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->brain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .tolrg.Body body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  // required .tolrg.Brain brain = 3;
  if (has_brain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->brain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Robot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .tolrg.Body body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

    // required .tolrg.Brain brain = 3;
    if (has_brain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_body()) {
      mutable_body()->::tolrg::Body::MergeFrom(from.body());
    }
    if (from.has_brain()) {
      mutable_brain()->::tolrg::Brain::MergeFrom(from.brain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  if (has_brain()) {
    if (!this->brain().IsInitialized()) return false;
  }
  return true;
}

void Robot::Swap(Robot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(body_, other->body_);
    std::swap(brain_, other->brain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_descriptor_;
  metadata.reflection = Robot_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tolrg

// @@protoc_insertion_point(global_scope)
