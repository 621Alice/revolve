c("Non-S: Tilted", "Seasonal: Tilted"),
c("Non-S: Tilted", "Non-S: Flat"),
c("Seasonal: Tilted", "Seasonal: Flat"))
aux_width=14
}else{  comps = list(c("Non-S: Flat", "Non-S: Tilted"),
c("Non-S: Flat", "Seasonal"),
c("Non-S: Tilted", "Seasonal"))
aux_width=7
}
g1 = g1 + geom_signif( test="wilcox.test", size=2, textsize=22,
comparisons = comps,
map_signif_level=c("***"=0.001,"**"=0.01, "*"=0.05) )
if (max_y>0) {
g1 = g1 + coord_cartesian(ylim = c(0, max_y))
}
ggsave(paste(output_directory,"/",measures_names[i],"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = aux_width)
}
# densities
measures_snapshots_all_densities = sqldf(paste("select * from measures_snapshots_all where generation=99
and method !='", methods[length(methods)],"'",sep='' ))
measures_names_densities = c('length_of_limbs','proportion', 'absolute_size','head_balance','joints', 'limbs')
measures_labels_densities = c('Rel. Length of Limbs','Proportion', 'Size','Balance','Rel. Number of Joints', 'Rel. Number of Limbs')
for (i in 1:length(measures_names_densities))
{
for (j in 1:length(measures_names_densities))
{
if(i != j)
{
graph <- ggplot(measures_snapshots_all_densities, aes_string(x=measures_names_densities[j], y= measures_names_densities[i]))+
geom_density_2d(aes(colour = method ), alpha=0.7, size=3 )+
scale_color_manual(values = c(experiments_type_colors[4:4], experiments_type_colors[1:2]) )+
labs( x = measures_labels_densities[j], y= measures_labels_densities[i] )+
theme(legend.position="none" ,   axis.text=element_text(size=21),axis.title=element_text(size=22),
plot.subtitle=element_text(size=25 )) +
coord_cartesian(ylim = c(0, 1), xlim = c(0, 1))
ggsave(paste( output_directory ,'/density_',measures_names_densities[i],'_', measures_names_densities[j],'.png',  sep=''), graph ,
device='png', height = 6, width = 6)
}
}
}
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) + #notch=TRUE
labs( x="Environment", y=measures_labels[i], title="Final generation")
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance')
{  g1 = g1 +  scale_color_manual(values=experiments_type_colors)
}else{  g1 = g1 +  scale_color_manual(values= c(experiments_type_colors[1:2],experiments_type_colors[4:4])) }
g1 = g1 + theme(legend.position="none" , text = element_text(size=45) ,
plot.title=element_text(size=40),  axis.text=element_text(size=45),
axis.title=element_text(size=50),
axis.text.x = element_text(angle = 20, hjust = 1 ),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  0.9, unit = "cm")
)+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance') {  comps = list(c("Non-S: Flat", "Seasonal: Flat"),
c("Non-S: Tilted", "Seasonal: Tilted"),
c("Non-S: Tilted", "Non-S: Flat"),
c("Seasonal: Tilted", "Seasonal: Flat"))
aux_width=14
}else{  comps = list(c("Non-S: Flat", "Non-S: Tilted"),
c("Non-S: Flat", "Seasonal"),
c("Non-S: Tilted", "Seasonal"))
aux_width=7
}
g1 = g1 + geom_signif( test="wilcox.test", size=2, textsize=22,
comparisons = comps,
map_signif_level=c("***"=0.001,"**"=0.01, "*"=0.05) )
if (max_y>0) {
g1 = g1 + coord_cartesian(ylim = c(0, max_y))
}
g1
for (i in 1:length(measures_names))
{
all_final_values = data.frame()
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance') {  fin=length(methods)
}else{  fin=length(methods)-1 }
for (exp in 1:fin)
{
temp = data.frame( c(measures_fin[[exp]][paste(methods[exp],'_',measures_names[i],'_avg', sep='')]))
colnames(temp) <- 'values'
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance')
{  temp$type = experiments_labels[exp]
}else{  temp$type = experiments_labels2[exp] }
all_final_values = rbind(all_final_values, temp)
}
max_y =  max(all_final_values$values) * 1.1
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) + #notch=TRUE
labs( x="Environment", y=measures_labels[i], title="Final generation")
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance')
{  g1 = g1 +  scale_color_manual(values=experiments_type_colors)
}else{  g1 = g1 +  scale_color_manual(values= c(experiments_type_colors[1:2],experiments_type_colors[4:4])) }
g1 = g1 + theme(legend.position="none" , text = element_text(size=45) ,
plot.title=element_text(size=40),  axis.text=element_text(size=45),
axis.title=element_text(size=50),
axis.text.x = element_text(angle = 20, hjust = 1 ),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  1.2, unit = "cm")
)+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance') {  comps = list(c("Non-S: Flat", "Seasonal: Flat"),
c("Non-S: Tilted", "Seasonal: Tilted"),
c("Non-S: Tilted", "Non-S: Flat"),
c("Seasonal: Tilted", "Seasonal: Flat"))
aux_width=14
}else{  comps = list(c("Non-S: Flat", "Non-S: Tilted"),
c("Non-S: Flat", "Seasonal"),
c("Non-S: Tilted", "Seasonal"))
aux_width=7
}
g1 = g1 + geom_signif( test="wilcox.test", size=2, textsize=22,
comparisons = comps,
map_signif_level=c("***"=0.001,"**"=0.01, "*"=0.05) )
if (max_y>0) {
g1 = g1 + coord_cartesian(ylim = c(0, max_y))
}
g1
ggsave(paste(output_directory,"/",measures_names[i],"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = aux_width)
}
for (i in 1:length(measures_names))
{
all_final_values = data.frame()
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance') {  fin=length(methods)
}else{  fin=length(methods)-1 }
for (exp in 1:fin)
{
temp = data.frame( c(measures_fin[[exp]][paste(methods[exp],'_',measures_names[i],'_avg', sep='')]))
colnames(temp) <- 'values'
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance')
{  temp$type = experiments_labels[exp]
}else{  temp$type = experiments_labels2[exp] }
all_final_values = rbind(all_final_values, temp)
}
max_y =  max(all_final_values$values) * 1.1
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) + #notch=TRUE
labs( x="Environment", y=measures_labels[i], title="Final generation")
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance')
{  g1 = g1 +  scale_color_manual(values=experiments_type_colors)
}else{  g1 = g1 +  scale_color_manual(values= c(experiments_type_colors[1:2],experiments_type_colors[4:4])) }
g1 = g1 + theme(legend.position="none" , text = element_text(size=45) ,
plot.title=element_text(size=40),  axis.text=element_text(size=45),
axis.title=element_text(size=50),
axis.text.x = element_text(angle = 20, hjust = 1 ),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  1.4, unit = "cm")
)+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance') {  comps = list(c("Non-S: Flat", "Seasonal: Flat"),
c("Non-S: Tilted", "Seasonal: Tilted"),
c("Non-S: Tilted", "Non-S: Flat"),
c("Seasonal: Tilted", "Seasonal: Flat"))
aux_width=14
}else{  comps = list(c("Non-S: Flat", "Non-S: Tilted"),
c("Non-S: Flat", "Seasonal"),
c("Non-S: Tilted", "Seasonal"))
aux_width=7
}
g1 = g1 + geom_signif( test="wilcox.test", size=2, textsize=22,
comparisons = comps,
map_signif_level=c("***"=0.001,"**"=0.01, "*"=0.05) )
if (max_y>0) {
g1 = g1 + coord_cartesian(ylim = c(0, max_y))
}
g1
ggsave(paste(output_directory,"/",measures_names[i],"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = aux_width)
}
for (i in 1:length(measures_names))
{
all_final_values = data.frame()
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance') {  fin=length(methods)
}else{  fin=length(methods)-1 }
for (exp in 1:fin)
{
temp = data.frame( c(measures_fin[[exp]][paste(methods[exp],'_',measures_names[i],'_avg', sep='')]))
colnames(temp) <- 'values'
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance')
{  temp$type = experiments_labels[exp]
}else{  temp$type = experiments_labels2[exp] }
all_final_values = rbind(all_final_values, temp)
}
max_y =  max(all_final_values$values) * 1.1
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) + #notch=TRUE
labs( x="Environment", y=measures_labels[i], title="Final generation")
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance')
{  g1 = g1 +  scale_color_manual(values=experiments_type_colors)
}else{  g1 = g1 +  scale_color_manual(values= c(experiments_type_colors[1:2],experiments_type_colors[4:4])) }
g1 = g1 + theme(legend.position="none" , text = element_text(size=45) ,
plot.title=element_text(size=40),  axis.text=element_text(size=45),
axis.title=element_text(size=50),
axis.text.x = element_text(angle = 20, hjust = 1 ),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  1.6, unit = "cm")
)+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance') {  comps = list(c("Non-S: Flat", "Seasonal: Flat"),
c("Non-S: Tilted", "Seasonal: Tilted"),
c("Non-S: Tilted", "Non-S: Flat"),
c("Seasonal: Tilted", "Seasonal: Flat"))
aux_width=14
}else{  comps = list(c("Non-S: Flat", "Non-S: Tilted"),
c("Non-S: Flat", "Seasonal"),
c("Non-S: Tilted", "Seasonal"))
aux_width=7
}
g1 = g1 + geom_signif( test="wilcox.test", size=2, textsize=22,
comparisons = comps,
map_signif_level=c("***"=0.001,"**"=0.01, "*"=0.05) )
if (max_y>0) {
g1 = g1 + coord_cartesian(ylim = c(0, max_y))
}
ggsave(paste(output_directory,"/",measures_names[i],"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = aux_width)
}
for (i in 1:length(measures_names))
{
all_final_values = data.frame()
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance') {  fin=length(methods)
}else{  fin=length(methods)-1 }
for (exp in 1:fin)
{
temp = data.frame( c(measures_fin[[exp]][paste(methods[exp],'_',measures_names[i],'_avg', sep='')]))
colnames(temp) <- 'values'
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance')
{  temp$type = experiments_labels[exp]
}else{  temp$type = experiments_labels2[exp] }
all_final_values = rbind(all_final_values, temp)
}
max_y =  max(all_final_values$values) * 1.1
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) + #notch=TRUE
labs( x="Environment", y=measures_labels[i], title="Final generation")
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance')
{  g1 = g1 +  scale_color_manual(values=experiments_type_colors)
}else{  g1 = g1 +  scale_color_manual(values= c(experiments_type_colors[1:2],experiments_type_colors[4:4])) }
g1 = g1 + theme(legend.position="none" , text = element_text(size=45) ,
plot.title=element_text(size=40),  axis.text=element_text(size=45),
axis.title=element_text(size=50),
axis.text.x = element_text(angle = 20, hjust = 1 ),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  2, unit = "cm")
)+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance') {  comps = list(c("Non-S: Flat", "Seasonal: Flat"),
c("Non-S: Tilted", "Seasonal: Tilted"),
c("Non-S: Tilted", "Non-S: Flat"),
c("Seasonal: Tilted", "Seasonal: Flat"))
aux_width=14
}else{  comps = list(c("Non-S: Flat", "Non-S: Tilted"),
c("Non-S: Flat", "Seasonal"),
c("Non-S: Tilted", "Seasonal"))
aux_width=7
}
g1 = g1 + geom_signif( test="wilcox.test", size=2, textsize=22,
comparisons = comps,
map_signif_level=c("***"=0.001,"**"=0.01, "*"=0.05) )
if (max_y>0) {
g1 = g1 + coord_cartesian(ylim = c(0, max_y))
}
ggsave(paste(output_directory,"/",measures_names[i],"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = aux_width)
}
for (i in 1:length(measures_names))
{
all_final_values = data.frame()
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance') {  fin=length(methods)
}else{  fin=length(methods)-1 }
for (exp in 1:fin)
{
temp = data.frame( c(measures_fin[[exp]][paste(methods[exp],'_',measures_names[i],'_avg', sep='')]))
colnames(temp) <- 'values'
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance')
{  temp$type = experiments_labels[exp]
}else{  temp$type = experiments_labels2[exp] }
all_final_values = rbind(all_final_values, temp)
}
max_y =  max(all_final_values$values) * 1.1
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) + #notch=TRUE
labs( x="Environment", y=measures_labels[i], title="Final generation")
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance')
{  g1 = g1 +  scale_color_manual(values=experiments_type_colors)
}else{  g1 = g1 +  scale_color_manual(values= c(experiments_type_colors[1:2],experiments_type_colors[4:4])) }
g1 = g1 + theme(legend.position="none" , text = element_text(size=45) ,
plot.title=element_text(size=40),  axis.text=element_text(size=45),
axis.title=element_text(size=50),
axis.text.x = element_text(angle = 20, hjust = 1 ),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  2, unit = "cm")
)+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance') {  comps = list(c("Non-S: Flat", "Seasonal: Flat"),
c("Non-S: Tilted", "Seasonal: Tilted"),
c("Non-S: Tilted", "Non-S: Flat"),
c("Seasonal: Tilted", "Seasonal: Flat"))
aux_width=14
}else{  comps = list(c("Non-S: Flat", "Non-S: Tilted"),
c("Non-S: Flat", "Seasonal"),
c("Non-S: Tilted", "Seasonal"))
aux_width=10
}
g1 = g1 + geom_signif( test="wilcox.test", size=2, textsize=22,
comparisons = comps,
map_signif_level=c("***"=0.001,"**"=0.01, "*"=0.05) )
if (max_y>0) {
g1 = g1 + coord_cartesian(ylim = c(0, max_y))
}
ggsave(paste(output_directory,"/",measures_names[i],"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = aux_width)
}
for (i in 1:length(measures_names))
{
all_final_values = data.frame()
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance') {  fin=length(methods)
}else{  fin=length(methods)-1 }
for (exp in 1:fin)
{
temp = data.frame( c(measures_fin[[exp]][paste(methods[exp],'_',measures_names[i],'_avg', sep='')]))
colnames(temp) <- 'values'
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance')
{  temp$type = experiments_labels[exp]
}else{  temp$type = experiments_labels2[exp] }
all_final_values = rbind(all_final_values, temp)
}
max_y =  max(all_final_values$values) * 1.1
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) + #notch=TRUE
labs( x="Environment", y=measures_labels[i], title="Final generation")
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance')
{  g1 = g1 +  scale_color_manual(values=experiments_type_colors)
}else{  g1 = g1 +  scale_color_manual(values= c(experiments_type_colors[1:2],experiments_type_colors[4:4])) }
g1 = g1 + theme(legend.position="none" , text = element_text(size=45) ,
plot.title=element_text(size=40),  axis.text=element_text(size=45),
axis.title=element_text(size=50),
axis.text.x = element_text(angle = 20, hjust = 1 ),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  1.5, unit = "cm")
)+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance') {  comps = list(c("Non-S: Flat", "Seasonal: Flat"),
c("Non-S: Tilted", "Seasonal: Tilted"),
c("Non-S: Tilted", "Non-S: Flat"),
c("Seasonal: Tilted", "Seasonal: Flat"))
aux_width=14
}else{  comps = list(c("Non-S: Flat", "Non-S: Tilted"),
c("Non-S: Flat", "Seasonal"),
c("Non-S: Tilted", "Seasonal"))
aux_width=10
}
g1 = g1 + geom_signif( test="wilcox.test", size=2, textsize=22,
comparisons = comps,
map_signif_level=c("***"=0.001,"**"=0.01, "*"=0.05) )
if (max_y>0) {
g1 = g1 + coord_cartesian(ylim = c(0, max_y))
}
ggsave(paste(output_directory,"/",measures_names[i],"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = aux_width)
}
for (i in 1:length(measures_names))
{
all_final_values = data.frame()
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance') {  fin=length(methods)
}else{  fin=length(methods)-1 }
for (exp in 1:fin)
{
temp = data.frame( c(measures_fin[[exp]][paste(methods[exp],'_',measures_names[i],'_avg', sep='')]))
colnames(temp) <- 'values'
if (measures_names[i] == 'displacement_velocity_hill' || measures_names[i] == 'head_balance')
{  temp$type = experiments_labels[exp]
}else{  temp$type = experiments_labels2[exp] }
all_final_values = rbind(all_final_values, temp)
}
max_y =  max(all_final_values$values) * 1.1
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) + #notch=TRUE
labs( x="Environment", y=measures_labels[i], title="Final generation")
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance')
{  g1 = g1 +  scale_color_manual(values=experiments_type_colors)
}else{  g1 = g1 +  scale_color_manual(values= c(experiments_type_colors[1:2],experiments_type_colors[4:4])) }
g1 = g1 + theme(legend.position="none" , text = element_text(size=45) ,
plot.title=element_text(size=40),  axis.text=element_text(size=45),
axis.title=element_text(size=50),
axis.text.x = element_text(angle = 20, hjust = 1 ),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  1.2, unit = "cm")
)+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
if (measures_names[i] == 'displacement_velocity_hill'  || measures_names[i] == 'head_balance') {  comps = list(c("Non-S: Flat", "Seasonal: Flat"),
c("Non-S: Tilted", "Seasonal: Tilted"),
c("Non-S: Tilted", "Non-S: Flat"),
c("Seasonal: Tilted", "Seasonal: Flat"))
aux_width=14
}else{  comps = list(c("Non-S: Flat", "Non-S: Tilted"),
c("Non-S: Flat", "Seasonal"),
c("Non-S: Tilted", "Seasonal"))
aux_width=11
}
g1 = g1 + geom_signif( test="wilcox.test", size=2, textsize=22,
comparisons = comps,
map_signif_level=c("***"=0.001,"**"=0.01, "*"=0.05) )
if (max_y>0) {
g1 = g1 + coord_cartesian(ylim = c(0, max_y))
}
ggsave(paste(output_directory,"/",measures_names[i],"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = aux_width)
}
library(sqldf)
require('magick')
##### change paths/labels/params here #####
paths = c( 'flat', 'lava')
environments = list(c( 'plane'),
c( 'lava')
)
base_directory <- paste('data/', sep='')
experiments = c(1:20)
gens = 100
pop = 100
num_top = 1
analysis = 'analysis_journal1_lava'
##### change paths/labels/params here #####
output_directory = paste(base_directory,analysis, sep='')
file <-file(paste(output_directory,'/best.txt',sep=''), open="w")
# for each method
for(m in 1:length(paths))
{
# for each repetition
for (exp in experiments)
{
input_directory1  <-    paste(base_directory, paths[m],'_',exp, '/data_fullevolution/',environments[[m]][1],sep='')
input_directory2  <-    paste(base_directory, paths[m],'_',exp, '/selectedpop_', sep='')
ids_gens = data.frame()
list = strsplit(list.files(paste(input_directory2, environments[[m]][1],'/selectedpop_',gens-1, sep='')), ' ')
for(geno in 1:pop)
{
genome =  data.frame(cbind(c(gens), c(strsplit(strsplit(list [[geno]],'_')[[1]][3],'.png')[[1]][1] )))
names(genome)<-c('generation','robot_id')
ids_gens = rbind(ids_gens,genome)
}
measures   =  read.table(paste(input_directory1,"/all_measures.tsv", sep=''), header = TRUE)
bests =  sqldf(paste("select robot_id, cons_fitness from measures inner join ids_gens using (robot_id) order by cons_fitness desc limit",num_top))
for(b in 1:nrow(bests))
{
writeLines( paste(paths[m],'exp',exp,bests[b,'robot_id'] ,bests[b,'cons_fitness'] ), file )
print( paste(paths[m],'exp',exp,bests[b,'robot_id'] ,bests[b,'cons_fitness'] ))
phenotype= bests[b,'robot_id']
for (env in 1:length(environments[[m]]))
{
patha = paste(input_directory2, environments[[m]][env], "/selectedpop_",gens-1,sep="")
body <- list.files(patha, paste("body_robot_",phenotype,".png$",sep=""), full.names = TRUE)
body = image_read(body)
body = image_scale(body, "100x100")
body = image_border(image_background(body, "white"), "white", "5x5")
if(b == 1 && env == 1)
{
bodies = body
}else{
bodies = c(bodies, body)
}
}
}
side_by_side = image_append(bodies, stack=F)
image_write(side_by_side, path = paste(output_directory,"/",paths[m],'_', environments[[m]][env], "_bodies_best_",exp,".png",sep=''), format = "png")
}
}
close(file)
library(sqldf)
require('magick')
##### change paths/labels/params here #####
paths = c( 'baseline_big', 'plastic_big')
environments = list(c( 'plane','tilted5'),
c( 'plane','tilted5')
)
base_directory <- paste('data/', sep='')
experiments = c(1:10)
gens = 114#150
pop = 100
num_top = 3
analysis = 'analysis_journal2_tilted'
##### change paths/labels/params here #####
output_directory = paste(base_directory,analysis, sep='')
file <-file(paste(output_directory,'/best.txt',sep=''), open="w")
# for each method
for(m in 1:length(paths))
{
# for each repetition
for (exp in experiments)
{
input_directory1  <-    paste(base_directory, paths[m],'_',exp, '/data_fullevolution/',environments[[m]][1],sep='')
input_directory2  <-    paste(base_directory, paths[m],'_',exp, '/selectedpop_', sep='')
ids_gens = data.frame()
list = strsplit(list.files(paste(input_directory2, environments[[m]][1],'/selectedpop_',gens-1, sep='')), ' ')
for(geno in 1:pop)
{
genome =  data.frame(cbind(c(gens), c(strsplit(strsplit(list [[geno]],'_')[[1]][3],'.png')[[1]][1] )))
names(genome)<-c('generation','robot_id')
ids_gens = rbind(ids_gens,genome)
}
measures   =  read.table(paste(input_directory1,"/all_measures.tsv", sep=''), header = TRUE)
bests =  sqldf(paste("select robot_id, cons_fitness from measures inner join ids_gens using (robot_id) order by cons_fitness desc limit",num_top))
for(b in 1:nrow(bests))
{
writeLines( paste(paths[m],'exp',exp,bests[b,'robot_id'] ,bests[b,'cons_fitness'] ), file )
print( paste(paths[m],'exp',exp,bests[b,'robot_id'] ,bests[b,'cons_fitness'] ))
phenotype= bests[b,'robot_id']
for (env in 1:length(environments[[m]]))
{
patha = paste(input_directory2, environments[[m]][env], "/selectedpop_",gens-1,sep="")
body <- list.files(patha, paste("body_robot_",phenotype,".png$",sep=""), full.names = TRUE)
body = image_read(body)
body = image_scale(body, "100x100")
body = image_border(image_background(body, "white"), "white", "5x5")
if(b == 1 && env == 1)
{
bodies = body
}else{
bodies = c(bodies, body)
}
}
}
side_by_side = image_append(bodies, stack=F)
image_write(side_by_side, path = paste(output_directory,"/",paths[m],'_', environments[[m]][env], "_bodies_best_",exp,".png",sep=''), format = "png")
}
}
close(file)
