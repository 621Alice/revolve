// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tol.proto

#ifndef PROTOBUF_tol_2eproto__INCLUDED
#define PROTOBUF_tol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tol_2eproto();
void protobuf_AssignDesc_tol_2eproto();
void protobuf_ShutdownFile_tol_2eproto();

class Parameter;
class BodyPart;
class BodyConnection;
class Body;
class NeuralConnection;
class Neuron;
class Brain;
class Robot;

// ===================================================================

class Parameter : public ::google::protobuf::Message {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameter& default_instance();

  void Swap(Parameter* other);

  // implements Message ----------------------------------------------

  Parameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float paramValue = 1;
  inline bool has_paramvalue() const;
  inline void clear_paramvalue();
  static const int kParamValueFieldNumber = 1;
  inline float paramvalue() const;
  inline void set_paramvalue(float value);

  // @@protoc_insertion_point(class_scope:tol.Parameter)
 private:
  inline void set_has_paramvalue();
  inline void clear_has_paramvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float paramvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tol_2eproto();
  friend void protobuf_AssignDesc_tol_2eproto();
  friend void protobuf_ShutdownFile_tol_2eproto();

  void InitAsDefaultInstance();
  static Parameter* default_instance_;
};
// -------------------------------------------------------------------

class BodyPart : public ::google::protobuf::Message {
 public:
  BodyPart();
  virtual ~BodyPart();

  BodyPart(const BodyPart& from);

  inline BodyPart& operator=(const BodyPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyPart& default_instance();

  void Swap(BodyPart* other);

  // implements Message ----------------------------------------------

  BodyPart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BodyPart& from);
  void MergeFrom(const BodyPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated .tol.Parameter param = 3;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline const ::tol::Parameter& param(int index) const;
  inline ::tol::Parameter* mutable_param(int index);
  inline ::tol::Parameter* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::tol::Parameter >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::tol::Parameter >*
      mutable_param();

  // required int32 orientation = 4;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 4;
  inline ::google::protobuf::int32 orientation() const;
  inline void set_orientation(::google::protobuf::int32 value);

  // repeated .tol.BodyConnection children = 5;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 5;
  inline const ::tol::BodyConnection& children(int index) const;
  inline ::tol::BodyConnection* mutable_children(int index);
  inline ::tol::BodyConnection* add_children();
  inline const ::google::protobuf::RepeatedPtrField< ::tol::BodyConnection >&
      children() const;
  inline ::google::protobuf::RepeatedPtrField< ::tol::BodyConnection >*
      mutable_children();

  // @@protoc_insertion_point(class_scope:tol.BodyPart)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_orientation();
  inline void clear_has_orientation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::tol::Parameter > param_;
  ::google::protobuf::RepeatedPtrField< ::tol::BodyConnection > children_;
  ::google::protobuf::int32 orientation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_tol_2eproto();
  friend void protobuf_AssignDesc_tol_2eproto();
  friend void protobuf_ShutdownFile_tol_2eproto();

  void InitAsDefaultInstance();
  static BodyPart* default_instance_;
};
// -------------------------------------------------------------------

class BodyConnection : public ::google::protobuf::Message {
 public:
  BodyConnection();
  virtual ~BodyConnection();

  BodyConnection(const BodyConnection& from);

  inline BodyConnection& operator=(const BodyConnection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyConnection& default_instance();

  void Swap(BodyConnection* other);

  // implements Message ----------------------------------------------

  BodyConnection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BodyConnection& from);
  void MergeFrom(const BodyConnection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 srcSlot = 1;
  inline bool has_srcslot() const;
  inline void clear_srcslot();
  static const int kSrcSlotFieldNumber = 1;
  inline ::google::protobuf::int32 srcslot() const;
  inline void set_srcslot(::google::protobuf::int32 value);

  // required int32 destSlot = 2;
  inline bool has_destslot() const;
  inline void clear_destslot();
  static const int kDestSlotFieldNumber = 2;
  inline ::google::protobuf::int32 destslot() const;
  inline void set_destslot(::google::protobuf::int32 value);

  // required .tol.BodyPart part = 3;
  inline bool has_part() const;
  inline void clear_part();
  static const int kPartFieldNumber = 3;
  inline const ::tol::BodyPart& part() const;
  inline ::tol::BodyPart* mutable_part();
  inline ::tol::BodyPart* release_part();
  inline void set_allocated_part(::tol::BodyPart* part);

  // @@protoc_insertion_point(class_scope:tol.BodyConnection)
 private:
  inline void set_has_srcslot();
  inline void clear_has_srcslot();
  inline void set_has_destslot();
  inline void clear_has_destslot();
  inline void set_has_part();
  inline void clear_has_part();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 srcslot_;
  ::google::protobuf::int32 destslot_;
  ::tol::BodyPart* part_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_tol_2eproto();
  friend void protobuf_AssignDesc_tol_2eproto();
  friend void protobuf_ShutdownFile_tol_2eproto();

  void InitAsDefaultInstance();
  static BodyConnection* default_instance_;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  void Swap(Body* other);

  // implements Message ----------------------------------------------

  Body* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .tol.BodyPart root = 1;
  inline bool has_root() const;
  inline void clear_root();
  static const int kRootFieldNumber = 1;
  inline const ::tol::BodyPart& root() const;
  inline ::tol::BodyPart* mutable_root();
  inline ::tol::BodyPart* release_root();
  inline void set_allocated_root(::tol::BodyPart* root);

  // @@protoc_insertion_point(class_scope:tol.Body)
 private:
  inline void set_has_root();
  inline void clear_has_root();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::tol::BodyPart* root_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tol_2eproto();
  friend void protobuf_AssignDesc_tol_2eproto();
  friend void protobuf_ShutdownFile_tol_2eproto();

  void InitAsDefaultInstance();
  static Body* default_instance_;
};
// -------------------------------------------------------------------

class NeuralConnection : public ::google::protobuf::Message {
 public:
  NeuralConnection();
  virtual ~NeuralConnection();

  NeuralConnection(const NeuralConnection& from);

  inline NeuralConnection& operator=(const NeuralConnection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeuralConnection& default_instance();

  void Swap(NeuralConnection* other);

  // implements Message ----------------------------------------------

  NeuralConnection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NeuralConnection& from);
  void MergeFrom(const NeuralConnection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline const ::std::string& dest() const;
  inline void set_dest(const ::std::string& value);
  inline void set_dest(const char* value);
  inline void set_dest(const char* value, size_t size);
  inline ::std::string* mutable_dest();
  inline ::std::string* release_dest();
  inline void set_allocated_dest(::std::string* dest);

  // required float weight = 3;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 3;
  inline float weight() const;
  inline void set_weight(float value);

  // @@protoc_insertion_point(class_scope:tol.NeuralConnection)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dest_;
  float weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_tol_2eproto();
  friend void protobuf_AssignDesc_tol_2eproto();
  friend void protobuf_ShutdownFile_tol_2eproto();

  void InitAsDefaultInstance();
  static NeuralConnection* default_instance_;
};
// -------------------------------------------------------------------

class Neuron : public ::google::protobuf::Message {
 public:
  Neuron();
  virtual ~Neuron();

  Neuron(const Neuron& from);

  inline Neuron& operator=(const Neuron& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Neuron& default_instance();

  void Swap(Neuron* other);

  // implements Message ----------------------------------------------

  Neuron* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Neuron& from);
  void MergeFrom(const Neuron& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float bias = 4;
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 4;
  inline float bias() const;
  inline void set_bias(float value);

  // optional string bodyPartId = 5;
  inline bool has_bodypartid() const;
  inline void clear_bodypartid();
  static const int kBodyPartIdFieldNumber = 5;
  inline const ::std::string& bodypartid() const;
  inline void set_bodypartid(const ::std::string& value);
  inline void set_bodypartid(const char* value);
  inline void set_bodypartid(const char* value, size_t size);
  inline ::std::string* mutable_bodypartid();
  inline ::std::string* release_bodypartid();
  inline void set_allocated_bodypartid(::std::string* bodypartid);

  // optional int32 ioId = 6;
  inline bool has_ioid() const;
  inline void clear_ioid();
  static const int kIoIdFieldNumber = 6;
  inline ::google::protobuf::int32 ioid() const;
  inline void set_ioid(::google::protobuf::int32 value);

  // optional float tau = 7;
  inline bool has_tau() const;
  inline void clear_tau();
  static const int kTauFieldNumber = 7;
  inline float tau() const;
  inline void set_tau(float value);

  // optional float phaseOffset = 8;
  inline bool has_phaseoffset() const;
  inline void clear_phaseoffset();
  static const int kPhaseOffsetFieldNumber = 8;
  inline float phaseoffset() const;
  inline void set_phaseoffset(float value);

  // optional float period = 9;
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 9;
  inline float period() const;
  inline void set_period(float value);

  // optional float gain = 10;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 10;
  inline float gain() const;
  inline void set_gain(float value);

  // @@protoc_insertion_point(class_scope:tol.Neuron)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_bodypartid();
  inline void clear_has_bodypartid();
  inline void set_has_ioid();
  inline void clear_has_ioid();
  inline void set_has_tau();
  inline void clear_has_tau();
  inline void set_has_phaseoffset();
  inline void clear_has_phaseoffset();
  inline void set_has_period();
  inline void clear_has_period();
  inline void set_has_gain();
  inline void clear_has_gain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* layer_;
  ::std::string* type_;
  ::std::string* bodypartid_;
  float bias_;
  ::google::protobuf::int32 ioid_;
  float tau_;
  float phaseoffset_;
  float period_;
  float gain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_tol_2eproto();
  friend void protobuf_AssignDesc_tol_2eproto();
  friend void protobuf_ShutdownFile_tol_2eproto();

  void InitAsDefaultInstance();
  static Neuron* default_instance_;
};
// -------------------------------------------------------------------

class Brain : public ::google::protobuf::Message {
 public:
  Brain();
  virtual ~Brain();

  Brain(const Brain& from);

  inline Brain& operator=(const Brain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Brain& default_instance();

  void Swap(Brain* other);

  // implements Message ----------------------------------------------

  Brain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Brain& from);
  void MergeFrom(const Brain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tol.Neuron neuron = 1;
  inline int neuron_size() const;
  inline void clear_neuron();
  static const int kNeuronFieldNumber = 1;
  inline const ::tol::Neuron& neuron(int index) const;
  inline ::tol::Neuron* mutable_neuron(int index);
  inline ::tol::Neuron* add_neuron();
  inline const ::google::protobuf::RepeatedPtrField< ::tol::Neuron >&
      neuron() const;
  inline ::google::protobuf::RepeatedPtrField< ::tol::Neuron >*
      mutable_neuron();

  // repeated .tol.NeuralConnection connection = 2;
  inline int connection_size() const;
  inline void clear_connection();
  static const int kConnectionFieldNumber = 2;
  inline const ::tol::NeuralConnection& connection(int index) const;
  inline ::tol::NeuralConnection* mutable_connection(int index);
  inline ::tol::NeuralConnection* add_connection();
  inline const ::google::protobuf::RepeatedPtrField< ::tol::NeuralConnection >&
      connection() const;
  inline ::google::protobuf::RepeatedPtrField< ::tol::NeuralConnection >*
      mutable_connection();

  // @@protoc_insertion_point(class_scope:tol.Brain)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tol::Neuron > neuron_;
  ::google::protobuf::RepeatedPtrField< ::tol::NeuralConnection > connection_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tol_2eproto();
  friend void protobuf_AssignDesc_tol_2eproto();
  friend void protobuf_ShutdownFile_tol_2eproto();

  void InitAsDefaultInstance();
  static Brain* default_instance_;
};
// -------------------------------------------------------------------

class Robot : public ::google::protobuf::Message {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot& default_instance();

  void Swap(Robot* other);

  // implements Message ----------------------------------------------

  Robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .tol.Body body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::tol::Body& body() const;
  inline ::tol::Body* mutable_body();
  inline ::tol::Body* release_body();
  inline void set_allocated_body(::tol::Body* body);

  // required .tol.Brain brain = 3;
  inline bool has_brain() const;
  inline void clear_brain();
  static const int kBrainFieldNumber = 3;
  inline const ::tol::Brain& brain() const;
  inline ::tol::Brain* mutable_brain();
  inline ::tol::Brain* release_brain();
  inline void set_allocated_brain(::tol::Brain* brain);

  // @@protoc_insertion_point(class_scope:tol.Robot)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_brain();
  inline void clear_has_brain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::tol::Body* body_;
  ::tol::Brain* brain_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_tol_2eproto();
  friend void protobuf_AssignDesc_tol_2eproto();
  friend void protobuf_ShutdownFile_tol_2eproto();

  void InitAsDefaultInstance();
  static Robot* default_instance_;
};
// ===================================================================


// ===================================================================

// Parameter

// required float paramValue = 1;
inline bool Parameter::has_paramvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameter::set_has_paramvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parameter::clear_has_paramvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parameter::clear_paramvalue() {
  paramvalue_ = 0;
  clear_has_paramvalue();
}
inline float Parameter::paramvalue() const {
  return paramvalue_;
}
inline void Parameter::set_paramvalue(float value) {
  set_has_paramvalue();
  paramvalue_ = value;
}

// -------------------------------------------------------------------

// BodyPart

// required string id = 1;
inline bool BodyPart::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyPart::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyPart::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyPart::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BodyPart::id() const {
  return *id_;
}
inline void BodyPart::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BodyPart::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BodyPart::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BodyPart::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BodyPart::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BodyPart::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool BodyPart::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BodyPart::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BodyPart::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BodyPart::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& BodyPart::type() const {
  return *type_;
}
inline void BodyPart::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BodyPart::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BodyPart::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BodyPart::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* BodyPart::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BodyPart::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .tol.Parameter param = 3;
inline int BodyPart::param_size() const {
  return param_.size();
}
inline void BodyPart::clear_param() {
  param_.Clear();
}
inline const ::tol::Parameter& BodyPart::param(int index) const {
  return param_.Get(index);
}
inline ::tol::Parameter* BodyPart::mutable_param(int index) {
  return param_.Mutable(index);
}
inline ::tol::Parameter* BodyPart::add_param() {
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tol::Parameter >&
BodyPart::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::tol::Parameter >*
BodyPart::mutable_param() {
  return &param_;
}

// required int32 orientation = 4;
inline bool BodyPart::has_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BodyPart::set_has_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BodyPart::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BodyPart::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::google::protobuf::int32 BodyPart::orientation() const {
  return orientation_;
}
inline void BodyPart::set_orientation(::google::protobuf::int32 value) {
  set_has_orientation();
  orientation_ = value;
}

// repeated .tol.BodyConnection children = 5;
inline int BodyPart::children_size() const {
  return children_.size();
}
inline void BodyPart::clear_children() {
  children_.Clear();
}
inline const ::tol::BodyConnection& BodyPart::children(int index) const {
  return children_.Get(index);
}
inline ::tol::BodyConnection* BodyPart::mutable_children(int index) {
  return children_.Mutable(index);
}
inline ::tol::BodyConnection* BodyPart::add_children() {
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tol::BodyConnection >&
BodyPart::children() const {
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::tol::BodyConnection >*
BodyPart::mutable_children() {
  return &children_;
}

// -------------------------------------------------------------------

// BodyConnection

// required int32 srcSlot = 1;
inline bool BodyConnection::has_srcslot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyConnection::set_has_srcslot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyConnection::clear_has_srcslot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyConnection::clear_srcslot() {
  srcslot_ = 0;
  clear_has_srcslot();
}
inline ::google::protobuf::int32 BodyConnection::srcslot() const {
  return srcslot_;
}
inline void BodyConnection::set_srcslot(::google::protobuf::int32 value) {
  set_has_srcslot();
  srcslot_ = value;
}

// required int32 destSlot = 2;
inline bool BodyConnection::has_destslot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BodyConnection::set_has_destslot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BodyConnection::clear_has_destslot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BodyConnection::clear_destslot() {
  destslot_ = 0;
  clear_has_destslot();
}
inline ::google::protobuf::int32 BodyConnection::destslot() const {
  return destslot_;
}
inline void BodyConnection::set_destslot(::google::protobuf::int32 value) {
  set_has_destslot();
  destslot_ = value;
}

// required .tol.BodyPart part = 3;
inline bool BodyConnection::has_part() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BodyConnection::set_has_part() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BodyConnection::clear_has_part() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BodyConnection::clear_part() {
  if (part_ != NULL) part_->::tol::BodyPart::Clear();
  clear_has_part();
}
inline const ::tol::BodyPart& BodyConnection::part() const {
  return part_ != NULL ? *part_ : *default_instance_->part_;
}
inline ::tol::BodyPart* BodyConnection::mutable_part() {
  set_has_part();
  if (part_ == NULL) part_ = new ::tol::BodyPart;
  return part_;
}
inline ::tol::BodyPart* BodyConnection::release_part() {
  clear_has_part();
  ::tol::BodyPart* temp = part_;
  part_ = NULL;
  return temp;
}
inline void BodyConnection::set_allocated_part(::tol::BodyPart* part) {
  delete part_;
  part_ = part;
  if (part) {
    set_has_part();
  } else {
    clear_has_part();
  }
}

// -------------------------------------------------------------------

// Body

// required .tol.BodyPart root = 1;
inline bool Body::has_root() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Body::set_has_root() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Body::clear_has_root() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Body::clear_root() {
  if (root_ != NULL) root_->::tol::BodyPart::Clear();
  clear_has_root();
}
inline const ::tol::BodyPart& Body::root() const {
  return root_ != NULL ? *root_ : *default_instance_->root_;
}
inline ::tol::BodyPart* Body::mutable_root() {
  set_has_root();
  if (root_ == NULL) root_ = new ::tol::BodyPart;
  return root_;
}
inline ::tol::BodyPart* Body::release_root() {
  clear_has_root();
  ::tol::BodyPart* temp = root_;
  root_ = NULL;
  return temp;
}
inline void Body::set_allocated_root(::tol::BodyPart* root) {
  delete root_;
  root_ = root;
  if (root) {
    set_has_root();
  } else {
    clear_has_root();
  }
}

// -------------------------------------------------------------------

// NeuralConnection

// required string src = 1;
inline bool NeuralConnection::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeuralConnection::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeuralConnection::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeuralConnection::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& NeuralConnection::src() const {
  return *src_;
}
inline void NeuralConnection::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void NeuralConnection::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void NeuralConnection::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NeuralConnection::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* NeuralConnection::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NeuralConnection::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dest = 2;
inline bool NeuralConnection::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeuralConnection::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeuralConnection::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeuralConnection::clear_dest() {
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    dest_->clear();
  }
  clear_has_dest();
}
inline const ::std::string& NeuralConnection::dest() const {
  return *dest_;
}
inline void NeuralConnection::set_dest(const ::std::string& value) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(value);
}
inline void NeuralConnection::set_dest(const char* value) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(value);
}
inline void NeuralConnection::set_dest(const char* value, size_t size) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NeuralConnection::mutable_dest() {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  return dest_;
}
inline ::std::string* NeuralConnection::release_dest() {
  clear_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dest_;
    dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NeuralConnection::set_allocated_dest(::std::string* dest) {
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_;
  }
  if (dest) {
    set_has_dest();
    dest_ = dest;
  } else {
    clear_has_dest();
    dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float weight = 3;
inline bool NeuralConnection::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeuralConnection::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NeuralConnection::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NeuralConnection::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float NeuralConnection::weight() const {
  return weight_;
}
inline void NeuralConnection::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// Neuron

// required string id = 1;
inline bool Neuron::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Neuron::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Neuron::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Neuron::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Neuron::id() const {
  return *id_;
}
inline void Neuron::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Neuron::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Neuron::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Neuron::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Neuron::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Neuron::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string layer = 2;
inline bool Neuron::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Neuron::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Neuron::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Neuron::clear_layer() {
  if (layer_ != &::google::protobuf::internal::kEmptyString) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& Neuron::layer() const {
  return *layer_;
}
inline void Neuron::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
}
inline void Neuron::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
}
inline void Neuron::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Neuron::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  return layer_;
}
inline ::std::string* Neuron::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Neuron::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::kEmptyString) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 3;
inline bool Neuron::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Neuron::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Neuron::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Neuron::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Neuron::type() const {
  return *type_;
}
inline void Neuron::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Neuron::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Neuron::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Neuron::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Neuron::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Neuron::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float bias = 4;
inline bool Neuron::has_bias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Neuron::set_has_bias() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Neuron::clear_has_bias() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Neuron::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float Neuron::bias() const {
  return bias_;
}
inline void Neuron::set_bias(float value) {
  set_has_bias();
  bias_ = value;
}

// optional string bodyPartId = 5;
inline bool Neuron::has_bodypartid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Neuron::set_has_bodypartid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Neuron::clear_has_bodypartid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Neuron::clear_bodypartid() {
  if (bodypartid_ != &::google::protobuf::internal::kEmptyString) {
    bodypartid_->clear();
  }
  clear_has_bodypartid();
}
inline const ::std::string& Neuron::bodypartid() const {
  return *bodypartid_;
}
inline void Neuron::set_bodypartid(const ::std::string& value) {
  set_has_bodypartid();
  if (bodypartid_ == &::google::protobuf::internal::kEmptyString) {
    bodypartid_ = new ::std::string;
  }
  bodypartid_->assign(value);
}
inline void Neuron::set_bodypartid(const char* value) {
  set_has_bodypartid();
  if (bodypartid_ == &::google::protobuf::internal::kEmptyString) {
    bodypartid_ = new ::std::string;
  }
  bodypartid_->assign(value);
}
inline void Neuron::set_bodypartid(const char* value, size_t size) {
  set_has_bodypartid();
  if (bodypartid_ == &::google::protobuf::internal::kEmptyString) {
    bodypartid_ = new ::std::string;
  }
  bodypartid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Neuron::mutable_bodypartid() {
  set_has_bodypartid();
  if (bodypartid_ == &::google::protobuf::internal::kEmptyString) {
    bodypartid_ = new ::std::string;
  }
  return bodypartid_;
}
inline ::std::string* Neuron::release_bodypartid() {
  clear_has_bodypartid();
  if (bodypartid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bodypartid_;
    bodypartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Neuron::set_allocated_bodypartid(::std::string* bodypartid) {
  if (bodypartid_ != &::google::protobuf::internal::kEmptyString) {
    delete bodypartid_;
  }
  if (bodypartid) {
    set_has_bodypartid();
    bodypartid_ = bodypartid;
  } else {
    clear_has_bodypartid();
    bodypartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ioId = 6;
inline bool Neuron::has_ioid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Neuron::set_has_ioid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Neuron::clear_has_ioid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Neuron::clear_ioid() {
  ioid_ = 0;
  clear_has_ioid();
}
inline ::google::protobuf::int32 Neuron::ioid() const {
  return ioid_;
}
inline void Neuron::set_ioid(::google::protobuf::int32 value) {
  set_has_ioid();
  ioid_ = value;
}

// optional float tau = 7;
inline bool Neuron::has_tau() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Neuron::set_has_tau() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Neuron::clear_has_tau() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Neuron::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
inline float Neuron::tau() const {
  return tau_;
}
inline void Neuron::set_tau(float value) {
  set_has_tau();
  tau_ = value;
}

// optional float phaseOffset = 8;
inline bool Neuron::has_phaseoffset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Neuron::set_has_phaseoffset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Neuron::clear_has_phaseoffset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Neuron::clear_phaseoffset() {
  phaseoffset_ = 0;
  clear_has_phaseoffset();
}
inline float Neuron::phaseoffset() const {
  return phaseoffset_;
}
inline void Neuron::set_phaseoffset(float value) {
  set_has_phaseoffset();
  phaseoffset_ = value;
}

// optional float period = 9;
inline bool Neuron::has_period() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Neuron::set_has_period() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Neuron::clear_has_period() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Neuron::clear_period() {
  period_ = 0;
  clear_has_period();
}
inline float Neuron::period() const {
  return period_;
}
inline void Neuron::set_period(float value) {
  set_has_period();
  period_ = value;
}

// optional float gain = 10;
inline bool Neuron::has_gain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Neuron::set_has_gain() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Neuron::clear_has_gain() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Neuron::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline float Neuron::gain() const {
  return gain_;
}
inline void Neuron::set_gain(float value) {
  set_has_gain();
  gain_ = value;
}

// -------------------------------------------------------------------

// Brain

// repeated .tol.Neuron neuron = 1;
inline int Brain::neuron_size() const {
  return neuron_.size();
}
inline void Brain::clear_neuron() {
  neuron_.Clear();
}
inline const ::tol::Neuron& Brain::neuron(int index) const {
  return neuron_.Get(index);
}
inline ::tol::Neuron* Brain::mutable_neuron(int index) {
  return neuron_.Mutable(index);
}
inline ::tol::Neuron* Brain::add_neuron() {
  return neuron_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tol::Neuron >&
Brain::neuron() const {
  return neuron_;
}
inline ::google::protobuf::RepeatedPtrField< ::tol::Neuron >*
Brain::mutable_neuron() {
  return &neuron_;
}

// repeated .tol.NeuralConnection connection = 2;
inline int Brain::connection_size() const {
  return connection_.size();
}
inline void Brain::clear_connection() {
  connection_.Clear();
}
inline const ::tol::NeuralConnection& Brain::connection(int index) const {
  return connection_.Get(index);
}
inline ::tol::NeuralConnection* Brain::mutable_connection(int index) {
  return connection_.Mutable(index);
}
inline ::tol::NeuralConnection* Brain::add_connection() {
  return connection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tol::NeuralConnection >&
Brain::connection() const {
  return connection_;
}
inline ::google::protobuf::RepeatedPtrField< ::tol::NeuralConnection >*
Brain::mutable_connection() {
  return &connection_;
}

// -------------------------------------------------------------------

// Robot

// required int32 id = 1;
inline bool Robot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Robot::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Robot::id() const {
  return id_;
}
inline void Robot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .tol.Body body = 2;
inline bool Robot::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robot::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Robot::clear_body() {
  if (body_ != NULL) body_->::tol::Body::Clear();
  clear_has_body();
}
inline const ::tol::Body& Robot::body() const {
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
inline ::tol::Body* Robot::mutable_body() {
  set_has_body();
  if (body_ == NULL) body_ = new ::tol::Body;
  return body_;
}
inline ::tol::Body* Robot::release_body() {
  clear_has_body();
  ::tol::Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline void Robot::set_allocated_body(::tol::Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
}

// required .tol.Brain brain = 3;
inline bool Robot::has_brain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Robot::set_has_brain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Robot::clear_has_brain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Robot::clear_brain() {
  if (brain_ != NULL) brain_->::tol::Brain::Clear();
  clear_has_brain();
}
inline const ::tol::Brain& Robot::brain() const {
  return brain_ != NULL ? *brain_ : *default_instance_->brain_;
}
inline ::tol::Brain* Robot::mutable_brain() {
  set_has_brain();
  if (brain_ == NULL) brain_ = new ::tol::Brain;
  return brain_;
}
inline ::tol::Brain* Robot::release_brain() {
  clear_has_brain();
  ::tol::Brain* temp = brain_;
  brain_ = NULL;
  return temp;
}
inline void Robot::set_allocated_brain(::tol::Brain* brain) {
  delete brain_;
  brain_ = brain;
  if (brain) {
    set_has_brain();
  } else {
    clear_has_brain();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tol_2eproto__INCLUDED
